<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三唐</title>
  <subtitle>Success requires experimentation!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-24T09:49:57.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>三唐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dubbo学习-理解动态代理</title>
    <link href="http://yoursite.com/2016/11/23/Dubbo%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2016/11/23/Dubbo学习-理解动态代理/</id>
    <published>2016-11-23T14:38:15.000Z</published>
    <updated>2016-11-24T09:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo_u5B66_u4E60-_u7406_u89E3_u52A8_u6001_u4EE3_u7406"><a href="#Dubbo_u5B66_u4E60-_u7406_u89E3_u52A8_u6001_u4EE3_u7406" class="headerlink" title="Dubbo学习-理解动态代理"></a>Dubbo学习-理解动态代理</h1><p>在之前的一篇post中了解了<a href="http://daveztong.github.io/2016/11/01/Spring%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84XML%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">spring可扩展的XML配置</a>是怎么一会事，接下来继续研究dubbo consumer端如何解析service并执行远程调用。</p>
<h2 id="u672C_u6B21_u7814_u7A76_u76EE_u6807"><a href="#u672C_u6B21_u7814_u7A76_u76EE_u6807" class="headerlink" title="本次研究目标"></a>本次研究目标</h2><ol>
<li>代理如何创建的。仅仅只是配置了<code>&lt;dubbo:reference interface=&quot;x.y.z.ServiceInterface&quot; id=&quot;serviceId&quot;/&gt;</code>并将其交给了spring container，然后直接注入并使用该接口的方法就可以完成调用了，然而我并没有为该接口实现具体的类，how does it works? </li>
<li><del>远程调用如何执行的。假设已经有了具体的实现类，怎么实现远程调用的呢，Thingking?</del> 由于第一个分析就很长，这个目标列入下一次分析。</li>
</ol>
<a id="more"></a>
<h2 id="u9884_u5907_u77E5_u8BC6"><a href="#u9884_u5907_u77E5_u8BC6" class="headerlink" title="预备知识"></a>预备知识</h2><p>为了顺利的研究上述两个目标，需要了解以下知识:</p>
<ol>
<li>SPI. <a href="https://docs.oracle.com/javase/tutorial/ext/basics/spi.html" target="_blank" rel="external">官方教程</a>。用于服务扩展。</li>
<li>Netty. <a href="http://netty.io/wiki/user-guide-for-4.x.html" target="_blank" rel="external">User Guide</a>。用于远程调用。</li>
<li>Javassist. <a href="https://jboss-javassist.github.io/javassist/tutorial/tutorial.html" target="_blank" rel="external">官方Tutorial</a>。动态类生成。</li>
</ol>
<h2 id="How_to_dig_in_3F"><a href="#How_to_dig_in_3F" class="headerlink" title="How to dig in?"></a>How to dig in?</h2><p>从何处入手是个问题，我的习惯是顺藤摸瓜，所以从service被注入开始:</p>
<p>dubbo service配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DemoService is just a interface --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">interface</span>=<span class="value">"x.y.z.DemoService"</span> <span class="attribute">id</span>=<span class="value">"demoService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>Service注入:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DemoService demoService;</span><br></pre></td></tr></table></figure>
<p>当使用这个<code>demoService</code>的时候可以肯定的是一定有个DemoService的具体实现可供使用，<code>DubboNamespaceHandler</code>中有这样一段代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class,<span class="keyword">false</span>));</span><br></pre></td></tr></table></figure>
<p>解析上面配置在namespace dubbo下的reference。<code>DubboBeanDefinitionParser</code>相关代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DubboBeanDefinitionParser</span><span class="params">(Class&lt;?&gt; beanClass, <span class="keyword">boolean</span> required)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.beanClass = beanClass;</span><br><span class="line">  <span class="keyword">this</span>.required = required;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> parse(element, parserContext, beanClass, required);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键部分</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext, Class&lt;?&gt; beanClass, <span class="keyword">boolean</span> required)</span> </span>&#123;</span><br><span class="line">    RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line">    <span class="comment">// 设置bean class,in this case it is ReferenceBean.class</span></span><br><span class="line">    beanDefinition.setBeanClass(beanClass);</span><br><span class="line">    beanDefinition.setLazyInit(<span class="keyword">false</span>);</span><br><span class="line">    String id = element.getAttribute(<span class="string">"id"</span>);</span><br><span class="line">    <span class="comment">// some ops...</span></span><br><span class="line">    <span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parserContext.getRegistry().containsBeanDefinition(id))  &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Duplicate spring bean id "</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);</span><br><span class="line">        beanDefinition.getPropertyValues().addPropertyValue(<span class="string">"id"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// some ops...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历setter and getter设置属性值</span></span><br><span class="line">    <span class="keyword">for</span> (Method setter : beanClass.getMethods()) &#123;</span><br><span class="line">        String name = setter.getName();</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt; <span class="number">3</span> &amp;&amp; name.startsWith(<span class="string">"set"</span>)</span><br><span class="line">                &amp;&amp; Modifier.isPublic(setter.getModifiers())</span><br><span class="line">                &amp;&amp; setter.getParameterTypes().length == <span class="number">1</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; type = setter.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">            String property = StringUtils.camelToSplitName(name.substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + name.substring(<span class="number">4</span>), <span class="string">"-"</span>);</span><br><span class="line">            <span class="keyword">if</span>(...)&#123;</span><br><span class="line">                <span class="comment">// some ops...</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                String value = element.getAttribute(property);</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    value = value.trim();</span><br><span class="line">                    <span class="keyword">if</span> (value.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="comment">// 部分省略...</span></span><br><span class="line">                            Object reference;</span><br><span class="line">                            <span class="keyword">if</span> (isPrimitive(type)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (<span class="string">"async"</span>.equals(property) &amp;&amp; <span class="string">"false"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"timeout"</span>.equals(property) &amp;&amp; <span class="string">"0"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"delay"</span>.equals(property) &amp;&amp; <span class="string">"0"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"version"</span>.equals(property) &amp;&amp; <span class="string">"0.0.0"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"stat"</span>.equals(property) &amp;&amp; <span class="string">"-1"</span>.equals(value)</span><br><span class="line">                                        || <span class="string">"reliable"</span>.equals(property) &amp;&amp; <span class="string">"false"</span>.equals(value)) &#123;</span><br><span class="line">                                    <span class="comment">// 兼容旧版本xsd中的default值</span></span><br><span class="line">                                    value = <span class="keyword">null</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                reference = value;</span><br><span class="line">                            &#125; </span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 大批省略...</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 这里会将interface这个attribute的值设置在ReferenceBean的父类ReferenceConfig的interfaceName上通过method:setInterface(String)</span></span><br><span class="line">                            beanDefinition.getPropertyValues().addPropertyValue(property, reference);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    <span class="keyword">return</span> beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面两个关键的属性值id,interface都设置在了bean上，后面会用到。ReferenceConfig中的settter:setInterface用来设置interface：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterface</span><span class="params">(String interfaceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interfaceName = interfaceName;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span> || id.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            id = interfaceName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>参考ReferenceBean Hierarchy:</p>
<p><img src="http://ww1.sinaimg.cn/mw690/50508d62gw1fa1b4h76xgj21960van07.jpg" alt="ReferenceBean Hierarchy"></p>
<p>ReferenceBean中包含以几个两个方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="comment">// inherit from ApplicationContextAware</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">  SpringExtensionFactory.addApplicationContext(applicationContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="comment">// inherit from FactoryBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get();<span class="comment">// 调用ReferenceConfig#get()方法创建类型为getObjectType()的对象，which in this case is instance of x.y.z.DemoService</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// inherit from FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">  <span class="keyword">return</span> getInterfaceClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此，重点关注ReferenceConfig#get(),follow up:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (destroyed)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already destroyed!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ref == <span class="keyword">null</span>) &#123;</span><br><span class="line">    init();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入init():</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some ops...</span></span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 之前设置的interface:x.y.z.DemoService</span></span><br><span class="line">            interfaceClass = Class.forName(interfaceName, <span class="keyword">true</span>, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a lot of ops...</span></span><br><span class="line">    ref = createProxy(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入createProxy(Map):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createProxy</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//some ops...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (urls.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        invoker = refprotocol.refer(interfaceClass, urls.get(<span class="number">0</span>));</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// some ops...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建服务代理</span></span><br><span class="line">    <span class="keyword">return</span> (T) proxyFactory.getProxy(invoker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里已经知道代理是由ProxyFactory创建了，接下重点看看ProxyFactory.</p>
<h2 id="ProxyFactory"><a href="#ProxyFactory" class="headerlink" title="ProxyFactory"></a>ProxyFactory</h2><p>ProxyFactory  Hierarchy:</p>
<p><img src="http://ww4.sinaimg.cn/mw690/50508d62gw1fa27gqakyxj20l8080gmy.jpg" alt="ProxyFactory Hierarchy"></p>
<h3 id="AbstractProxyFactory"><a href="#AbstractProxyFactory" class="headerlink" title="AbstractProxyFactory"></a>AbstractProxyFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">  Class&lt;?&gt;[] interfaces = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">// createProxy时创建invoker时已将interface传入</span></span><br><span class="line">  String config = invoker.getUrl().getParameter(<span class="string">"interfaces"</span>);</span><br><span class="line">  <span class="keyword">if</span> (config != <span class="keyword">null</span> &amp;&amp; config.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    String[] types = Constants.COMMA_SPLIT_PATTERN.split(config);</span><br><span class="line">    <span class="keyword">if</span> (types != <span class="keyword">null</span> &amp;&amp; types.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      interfaces = <span class="keyword">new</span> Class&lt;?&gt;[types.length + <span class="number">2</span>];</span><br><span class="line">      interfaces[<span class="number">0</span>] = invoker.getInterface();</span><br><span class="line">      interfaces[<span class="number">1</span>] = EchoService.class;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; types.length; i ++) &#123;</span><br><span class="line">        interfaces[i + <span class="number">1</span>] = ReflectUtils.forName(types[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (interfaces == <span class="keyword">null</span>) &#123;</span><br><span class="line">    interfaces = <span class="keyword">new</span> Class&lt;?&gt;[] &#123;invoker.getInterface(), EchoService.class&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用子类的实现</span></span><br><span class="line">  <span class="keyword">return</span> getProxy(invoker, interfaces);</span><br></pre></td></tr></table></figure>
<h3 id="JavassistProxyFactory"><a href="#JavassistProxyFactory" class="headerlink" title="JavassistProxyFactory"></a>JavassistProxyFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class="keyword">new</span> InvokerInvocationHandler(invoker));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getProxy</code>的相关代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Proxy <span class="title">getProxy</span><span class="params">(Class&lt;?&gt;... ics)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getProxy(ClassHelper.getCallerClassLoader(Proxy.class), ics);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态类的实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Proxy <span class="title">getProxy</span><span class="params">(ClassLoader cl, Class&lt;?&gt;... ics)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//some ops...</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            ccp = ClassGenerator.newInstance(cl);</span><br><span class="line"></span><br><span class="line">            Set&lt;String&gt; worked = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">            List&lt;Method&gt; methods = <span class="keyword">new</span> ArrayList&lt;Method&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取interface的相关信息并build code string，然后交给javassist动态生成实现类。</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ics.length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( !Modifier.isPublic(ics[i].getModifiers()) )</span><br><span class="line">                &#123;</span><br><span class="line">                    String npkg = ics[i].getPackage().getName();</span><br><span class="line">                    <span class="keyword">if</span>( pkg == <span class="keyword">null</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        pkg = npkg;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>( !pkg.equals(npkg)  )</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ccp.addInterface(ics[i]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>( Method method : ics[i].getMethods() )</span><br><span class="line">                &#123;</span><br><span class="line">                    String desc = ReflectUtils.getDesc(method);</span><br><span class="line">                    <span class="keyword">if</span>( worked.contains(desc) )</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    worked.add(desc);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> ix = methods.size();</span><br><span class="line">                    Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">                    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">                    StringBuilder code = <span class="keyword">new</span> StringBuilder(<span class="string">"Object[] args = new Object["</span>).append(pts.length).append(<span class="string">"];"</span>);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pts.length;j++)</span><br><span class="line">                        code.append(<span class="string">" args["</span>).append(j).append(<span class="string">"] = ($w)$"</span>).append(j+<span class="number">1</span>).append(<span class="string">";"</span>);</span><br><span class="line">                    <span class="comment">// 注意这里 handler.invoke(),代理的统一处理</span></span><br><span class="line">                    code.append(<span class="string">" Object ret = handler.invoke(this, methods["</span> + ix + <span class="string">"], args);"</span>);</span><br><span class="line">                    <span class="keyword">if</span>( !Void.TYPE.equals(rt) )</span><br><span class="line">                        code.append(<span class="string">" return "</span>).append(asArgument(rt, <span class="string">"ret"</span>)).append(<span class="string">";"</span>);</span><br><span class="line"></span><br><span class="line">                    methods.add(method);</span><br><span class="line">                    ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( pkg == <span class="keyword">null</span> )</span><br><span class="line">                pkg = PACKAGE_NAME;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接口的实现类</span></span><br><span class="line">            String pcn = pkg + <span class="string">".proxy"</span> + id;</span><br><span class="line">            ccp.setClassName(pcn);</span><br><span class="line">            ccp.addField(<span class="string">"public static java.lang.reflect.Method[] methods;"</span>);</span><br><span class="line">            ccp.addField(<span class="string">"private "</span> + InvocationHandler.class.getName() + <span class="string">" handler;"</span>);</span><br><span class="line">            ccp.addConstructor(Modifier.PUBLIC, <span class="keyword">new</span> Class&lt;?&gt;[]&#123; InvocationHandler.class &#125;, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>], <span class="string">"handler=$1;"</span>); <span class="comment">// $1等表示传入的参数，具体参考javassist官方文档</span></span><br><span class="line">            ccp.addDefaultConstructor();</span><br><span class="line">            Class&lt;?&gt; clazz = ccp.toClass();</span><br><span class="line">            clazz.getField(<span class="string">"methods"</span>).set(<span class="keyword">null</span>, methods.toArray(<span class="keyword">new</span> Method[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成当前Proxy的子类，实现newInstance()方法</span></span><br><span class="line">            String fcn = Proxy.class.getName() + id;</span><br><span class="line">            ccm = ClassGenerator.newInstance(cl);</span><br><span class="line">            ccm.setClassName(fcn);</span><br><span class="line">            ccm.addDefaultConstructor();</span><br><span class="line">            ccm.setSuperClass(Proxy.class);</span><br><span class="line">            ccm.addMethod(<span class="string">"public Object newInstance("</span> + InvocationHandler.class.getName() + <span class="string">" h)&#123; return new "</span> + pcn + <span class="string">"($1); &#125;"</span>);</span><br><span class="line">            Class&lt;?&gt; pc = ccm.toClass();</span><br><span class="line">            proxy = (Proxy)pc.newInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// some ops...</span></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>toClass()</code> 为ClassGenerator的方法，实现也是通过javassist生成动态类。 这儿返回的是Proxy的子类实例。JavassistProxyFactory的getProxy中<code>Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker));</code>这儿的newInstance()就属于这个子类实例。该方法的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(InvocationHandler handler)</span></span>;</span><br></pre></td></tr></table></figure>
<p>再来看看InvocationHandler的实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;?&gt; invoker;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerInvocationHandler</span><span class="params">(Invoker&lt;?&gt; handler)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.invoker = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(invoker, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"toString"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"hashCode"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"equals"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.equals(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回远程调用的结果</span></span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(<span class="keyword">new</span> RpcInvocation(method, args)).recreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这儿可能还有点迷糊，invoke是在哪里调用的呢？回头看看动态类生成部分有这样一段代码:</p>
<p><code>code.append(&quot; Object ret = handler.invoke(this, methods[&quot; + ix + &quot;], args);&quot;);</code>这就将代理调用衔接起来了。看起来可能有点抽象，待下面来试验一把。</p>
<h4 id="u8BD5_u9A8C"><a href="#u8BD5_u9A8C" class="headerlink" title="试验"></a>试验</h4><p><code>DemoService.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.examples.x.y.z;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by tangwei on 2016/11/23.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.examples.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.URL;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.examples.x.y.z.DemoService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.support.MockInvoker;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by tangwei on 2016/11/22.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JavassistProxyFactory().getProxy(<span class="keyword">new</span> MockInvoker&lt;DemoService&gt;(<span class="keyword">new</span> URL(<span class="string">""</span>, <span class="string">""</span>, <span class="number">8888</span>)),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;DemoService.class&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>ClassGenerator</code>中 toClass返回前加入以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 将class写入文件</span></span><br><span class="line">  mCtc.writeFile(<span class="string">"/path/to/save/classfile/"</span>+mSuperClass);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mCtc.toClass(loader, pd);</span><br></pre></td></tr></table></figure>
<p>debug一下main,在动态生成类的时候将类写入文件中，结果如下：</p>
<p>DemoService的实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.common.bytecode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.bytecode.ClassGenerator.DC;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.examples.x.y.z.DemoService;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">proxy0</span> <span class="keyword">implements</span> <span class="title">DC</span>, <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Method[] methods;</span><br><span class="line">    <span class="keyword">private</span> InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        Object[] var2 = <span class="keyword">new</span> Object[]&#123;var1&#125;;</span><br><span class="line">        <span class="keyword">this</span>.handler.invoke(<span class="keyword">this</span>, methods[<span class="number">0</span>], var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">proxy0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">proxy0</span><span class="params">(InvocationHandler var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = var1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Proxy的子类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.common.bytecode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.bytecode.Proxy;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.bytecode.proxy0;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.bytecode.ClassGenerator.DC;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">DC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(InvocationHandler var1)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回的是DemoService的实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> proxy0(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中DC接口只是一个标识接口，表示该类是动态生成的。这样看起来就比较清晰明了了。下面再来看看jdk的proxy。</p>
<h3 id="JdkProxyFactory"><a href="#JdkProxyFactory" class="headerlink" title="JdkProxyFactory"></a>JdkProxyFactory</h3><p>相关代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyFactory</span> <span class="keyword">extends</span> <span class="title">AbstractProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), interfaces, <span class="keyword">new</span> InvokerInvocationHandler(invoker));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName, </span><br><span class="line">                                      Class&lt;?&gt;[] parameterTypes, </span><br><span class="line">                                      Object[] arguments)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Method method = proxy.getClass().getMethod(methodName, parameterTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(proxy, arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到<code>Proxy.newProxyInstance</code>直接使用的是JDK的动态代理机制，因此就不再跟下去了。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>至此，对dubbo本地动态代理有一个清晰的理解了，总的来说一路顺藤摸瓜还算顺畅。对于选择哪一中方式作为生产使用，Dubbo推荐使用Javassist的代理机制，因为jdk原生的动态代理性能较差，生产环境不宜使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dubbo_u5B66_u4E60-_u7406_u89E3_u52A8_u6001_u4EE3_u7406&quot;&gt;&lt;a href=&quot;#Dubbo_u5B66_u4E60-_u7406_u89E3_u52A8_u6001_u4EE3_u7406&quot; class=&quot;headerlink&quot; title=&quot;Dubbo学习-理解动态代理&quot;&gt;&lt;/a&gt;Dubbo学习-理解动态代理&lt;/h1&gt;&lt;p&gt;在之前的一篇post中了解了&lt;a href=&quot;http://daveztong.github.io/2016/11/01/Spring%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84XML%E9%85%8D%E7%BD%AE/&quot;&gt;spring可扩展的XML配置&lt;/a&gt;是怎么一会事，接下来继续研究dubbo consumer端如何解析service并执行远程调用。&lt;/p&gt;
&lt;h2 id=&quot;u672C_u6B21_u7814_u7A76_u76EE_u6807&quot;&gt;&lt;a href=&quot;#u672C_u6B21_u7814_u7A76_u76EE_u6807&quot; class=&quot;headerlink&quot; title=&quot;本次研究目标&quot;&gt;&lt;/a&gt;本次研究目标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;代理如何创建的。仅仅只是配置了&lt;code&gt;&amp;lt;dubbo:reference interface=&amp;quot;x.y.z.ServiceInterface&amp;quot; id=&amp;quot;serviceId&amp;quot;/&amp;gt;&lt;/code&gt;并将其交给了spring container，然后直接注入并使用该接口的方法就可以完成调用了，然而我并没有为该接口实现具体的类，how does it works? &lt;/li&gt;
&lt;li&gt;&lt;del&gt;远程调用如何执行的。假设已经有了具体的实现类，怎么实现远程调用的呢，Thingking?&lt;/del&gt; 由于第一个分析就很长，这个目标列入下一次分析。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
      <category term="javassist" scheme="http://yoursite.com/tags/javassist/"/>
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Spring可扩展的XML配置</title>
    <link href="http://yoursite.com/2016/11/01/Spring%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84XML%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/01/Spring可扩展的XML配置/</id>
    <published>2016-11-01T03:58:34.000Z</published>
    <updated>2016-11-24T09:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring__u53EF_u6269_u5C55_u7684XML_u914D_u7F6E"><a href="#Spring__u53EF_u6269_u5C55_u7684XML_u914D_u7F6E" class="headerlink" title="Spring 可扩展的XML配置"></a>Spring 可扩展的XML配置</h1><p>Spring 自从2.0开始就为基础的xml格式提供了一个基于xml schema的扩展机制，用于定义和配置beans。本文基于此简单讲解如果定义自己的<code>BeanDefinitionParser</code>和如何将定义好的<code>parsers</code>集成到<code>Spring IoC container</code>中。</p>
<p>创建一个xml配置扩展可以通过以下4步完成：</p>
<ol>
<li>创建一个xml schema来描述你自定的xml元素。</li>
<li>编写一个<code>NamespaceHandler</code>的具体实现。</li>
<li>编写一个或者多个<code>BeanDefinitionParser</code>的实现。主要的工作都在此步骤完成。</li>
<li>关联<code>xsd</code>,<code>NamespaceHandler</code>。</li>
</ol>
<p>下面依照以上四个步骤并附一个示例详细讲解。完整代码放在码云上:<a href="https://git.oschina.net/android-speeder/springcustomxml.git" target="_blank" rel="external">https://git.oschina.net/android-speeder/springcustomxml.git</a></p>
<a id="more"></a>
<h2 id="u521B_u5EFAschema_u6587_u4EF6"><a href="#u521B_u5EFAschema_u6587_u4EF6" class="headerlink" title="创建schema文件"></a>创建schema文件</h2><p>创建一个spring可以用的xml配置扩展首先需要定义一个xml schema来描述这个扩展。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">xsd:schema</span> <span class="attribute">xmlns</span>=<span class="value">"http://daveztong.github.io/schema/dz"</span></span><br><span class="line">            <span class="attribute">xmlns:xsd</span>=<span class="value">"http://www.w3.org/2001/XMLSchema"</span></span><br><span class="line">            <span class="attribute">xmlns:beans</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">            <span class="attribute">targetNamespace</span>=<span class="value">"http://daveztong.github.io/schema/dz"</span></span><br><span class="line">            <span class="attribute">elementFormDefault</span>=<span class="value">"qualified"</span></span><br><span class="line">            <span class="attribute">attributeFormDefault</span>=<span class="value">"unqualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">xsd:import</span> <span class="attribute">namespace</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">xsd:element</span> <span class="attribute">name</span>=<span class="value">"person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xsd:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">xsd:complexContent</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">xsd:extension</span> <span class="attribute">base</span>=<span class="value">"beans:identifiedType"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">xsd:attribute</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">type</span>=<span class="value">"xsd:string"</span> <span class="attribute">use</span>=<span class="value">"required"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">xsd:attribute</span> <span class="attribute">name</span>=<span class="value">"age"</span> <span class="attribute">type</span>=<span class="value">"xsd:int"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">xsd:extension</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">xsd:element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意<code>&lt;xsd:extension base=&quot;beans:identifiedType&quot;&gt;</code>表示该tag含有一个id属性并且会被spring container用于识别该bean。使用该属性的前提是需要导入<code>&lt;xsd:import namespace=&quot;http://www.springframework.org/schema/beans&quot;/&gt;</code>。</p>
<h2 id="u5B9E_u73B0NamespaceHandler"><a href="#u5B9E_u73B0NamespaceHandler" class="headerlink" title="实现NamespaceHandler"></a>实现NamespaceHandler</h2><p>当spring在解析xml时遇到该namespace就需要使用自定义的<code>Namespacehandler</code>去解析所有该名称空间下的元素。</p>
<p><code>NamespaceHandler</code>只包含三个方法:</p>
<ul>
<li><code>init()</code>: 用于初始化<code>NamespaceHandler</code>。</li>
<li><code>BeanDefinition parse(Element, ParserContext)</code>：当spring遇到顶级的元素时才会调用。该方法可以直接返回一个bean definition或者自己注册一个。</li>
<li><code>BeanDefinitionHolder decorate(Node, BeanDefinitionHolder, ParserContext)</code>:当spring遇到属性定义或者嵌套在不同名称空间下的元素时才会被调用。</li>
</ul>
<p>我们可以自己实现<code>NamespaceHandler</code>,但是基于spring的惯例，一般都会提供一个基础类简化开发人员的工作，所以我们可以直接继承spring提供的<code>NamespaceHandlerSupport</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.daveztong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.NamespaceHandlerSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by tangwei on 2016/10/31.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DZNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"person"</span>,<span class="keyword">new</span> PersonBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到<code>DZNamespaceHandler</code>的代码量很少，因为真正的解析工作都委托给了<code>BeanDefinitionParser</code>。    <code>NamespaceHandler</code>支持注册任意多个<code>BeanDefinitionParser</code>,当其需要解析其所负责的名称空间下的元素时就会将解析工作委托给注册的<code>BeanDefinitionParser</code>。</p>
<h2 id="u5B9E_u73B0BeanDefinitionParser"><a href="#u5B9E_u73B0BeanDefinitionParser" class="headerlink" title="实现BeanDefinitionParser"></a>实现<code>BeanDefinitionParser</code></h2><p>当<code>NamespaceHandler</code>遇到一个与注册列表中key匹配的xml元素时就会将该元素的解析任务交给与key对应的<code>BeanDefinitionParser</code>。在本例中则是<code>PersonBeanDefinitionParser</code>。也就是说一个<code>BeanDefinitionParser</code>仅负责解析定义在指定schema中的一个唯一顶级的xml元素。在parser中我们可以访问到其负责解析的元素和子元素的内容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.daveztong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by tangwei on 2016/10/31.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">        String name = element.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(name)) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">"name"</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String age = element.getAttribute(<span class="string">"age"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(age)) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">"age"</span>, Integer.parseInt(age));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编码部分就这么多，是不是so easy! 可能有人会疑问，为什么没有看到<code>BeanDefiniiton</code>的创建，那是因为创建的工作由<code>AbstractSingleBeanDefinitionParser#parseInternal</code>完成了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> AbstractBeanDefinition <span class="title">parseInternal</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">		String parentName = getParentName(element);</span><br><span class="line">		<span class="keyword">if</span> (parentName != <span class="keyword">null</span>) &#123;</span><br><span class="line">			builder.getRawBeanDefinition().setParentName(parentName);</span><br><span class="line">		&#125;</span><br><span class="line">		Class&lt;?&gt; beanClass = getBeanClass(element);</span><br><span class="line">		<span class="keyword">if</span> (beanClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">			builder.getRawBeanDefinition().setBeanClass(beanClass);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			String beanClassName = getBeanClassName(element);</span><br><span class="line">			<span class="keyword">if</span> (beanClassName != <span class="keyword">null</span>) &#123;</span><br><span class="line">				builder.getRawBeanDefinition().setBeanClassName(beanClassName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element));</span><br><span class="line">		<span class="keyword">if</span> (parserContext.isNested()) &#123;</span><br><span class="line">			<span class="comment">// Inner bean definition must receive same scope as containing bean.</span></span><br><span class="line">			builder.setScope(parserContext.getContainingBeanDefinition().getScope());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (parserContext.isDefaultLazyInit()) &#123;</span><br><span class="line">			<span class="comment">// Default-lazy-init applies to custom bean definitions as well.</span></span><br><span class="line">			builder.setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		doParse(element, parserContext, builder);</span><br><span class="line">		<span class="keyword">return</span> builder.getBeanDefinition();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>The last statement <code>builder.getBeanDefinition();</code>返回了我们需要的bean. 继续看builder.getBeanDefinition()的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">getBeanDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.beanDefinition.validate();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.beanDefinition;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>That’s our bean!</p>
<p>编码部分是完成了，但是spring还不知道他们的存在，接下来就需要让spring aware of them!(aware是个很关键的词啊，在spring的代码里随处可见^_^)</p>
<h2 id="u6CE8_u518Chandler_and_schema"><a href="#u6CE8_u518Chandler_and_schema" class="headerlink" title="注册handler and schema"></a>注册handler and schema</h2><p>要让spring aware of out handler and xsd schema,我们需要在两个特殊的properties文件中注册他们。这些properties文件需要放在<code>META-INF</code>目录下面,并且可以和jar包一起发布。spring的解析框架通过这些特殊的properties文件就能pick up our handler and schema!</p>
<h3 id="META-INF/spring-handlers"><a href="#META-INF/spring-handlers" class="headerlink" title="META-INF/spring.handlers"></a>META-INF/spring.handlers</h3><p><code>spring.handlers</code>包含了 xml schema uri 和namespace handler之间的k-v映射关系，如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://daveztong.github.io/schema/dz=io.github.daveztong.DZNamespaceHandler</span><br></pre></td></tr></table></figure>
<p>注意，因为<code>:</code>在properties文件中是个合法的分隔符，所以需要escape以下！</p>
<p>其中URI部分是自定义的namespace扩展，必须与xsd中的<code>targetNamespace</code>完全匹配。</p>
<h3 id="META-INF/spring-schemas"><a href="#META-INF/spring-schemas" class="headerlink" title="META-INF/spring.schemas"></a>META-INF/spring.schemas</h3><p><code>spring.schemas</code>中包含了xml schema uri(对应<code>xsi:schemaLocation</code>的值)与classpath resources的映射关系。如果这个文件不存在，spring默认会从网上加载<code>xsi:schemaLocation</code>中所定义的schema。有个这个映射文件，spring就会从classpath中加载而不再联网查找。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://daveztong.github.io/schema/dz/dz.xsd=io/github/daveztong/schema/dz/dz.xsd</span><br></pre></td></tr></table></figure>
<h2 id="Now_2Ctime_to_test"><a href="#Now_2Ctime_to_test" class="headerlink" title="Now,time to test"></a>Now,time to test</h2><p>使用xml定义person bean: spring-beans.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xmlns:dz</span>=<span class="value">"http://daveztong.github.io/schema/dz"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"</span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://daveztong.github.io/schema/dz http://daveztong.github.io/schema/dz/dz.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- as a top-level bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dz:person</span> <span class="attribute">age</span>=<span class="value">"22"</span> <span class="attribute">id</span>=<span class="value">"person"</span> <span class="attribute">name</span>=<span class="value">"tangwei"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了演示效果，这里使用spring boot来快速测试: <code>App.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.daveztong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by tangwei on 2016/11/1.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@EnableAutoConfiguration</span></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@ImportResource</span>(<span class="string">"classpath:spring-beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="annotation">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> ,dada:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;age=<span class="number">22</span>, name=<span class="string">'tangwei'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>说了这么多，到底谁在用这个，能干啥呢！</p>
<h2 id="Dubbo_xml__u914D_u7F6E_u6269_u5C55"><a href="#Dubbo_xml__u914D_u7F6E_u6269_u5C55" class="headerlink" title="Dubbo xml 配置扩展"></a>Dubbo xml 配置扩展</h2><p>Dubbo 在国内开源RPC界算是比较知名的，她其实采用的就是这种方式解析自定义的配置。dubbo jar 包结构:</p>
<p><img src="http://ww4.sinaimg.cn/large/94dc19degw1f9cgo55oetj209q06hmxg.jpg" alt="dubbo jar structure"></p>
<p>spring.handlers:</p>
<p><code>http\://code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler</code></p>
<p>spring.schemas:</p>
<p><code>http\://code.alibabatech.com/schema/dubbo/dubbo.xsd=META-INF/dubbo.xsd</code></p>
<p>NamespaceHandler实现为:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(AnnotationBean.class, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该handler注册了所有的bean definition parser!</p>
<p>了解这种机制后，我们也可以根据自己需要做任何配置扩展。So cool!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring__u53EF_u6269_u5C55_u7684XML_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#Spring__u53EF_u6269_u5C55_u7684XML_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;Spring 可扩展的XML配置&quot;&gt;&lt;/a&gt;Spring 可扩展的XML配置&lt;/h1&gt;&lt;p&gt;Spring 自从2.0开始就为基础的xml格式提供了一个基于xml schema的扩展机制，用于定义和配置beans。本文基于此简单讲解如果定义自己的&lt;code&gt;BeanDefinitionParser&lt;/code&gt;和如何将定义好的&lt;code&gt;parsers&lt;/code&gt;集成到&lt;code&gt;Spring IoC container&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;创建一个xml配置扩展可以通过以下4步完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个xml schema来描述你自定的xml元素。&lt;/li&gt;
&lt;li&gt;编写一个&lt;code&gt;NamespaceHandler&lt;/code&gt;的具体实现。&lt;/li&gt;
&lt;li&gt;编写一个或者多个&lt;code&gt;BeanDefinitionParser&lt;/code&gt;的实现。主要的工作都在此步骤完成。&lt;/li&gt;
&lt;li&gt;关联&lt;code&gt;xsd&lt;/code&gt;,&lt;code&gt;NamespaceHandler&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面依照以上四个步骤并附一个示例详细讲解。完整代码放在码云上:&lt;a href=&quot;https://git.oschina.net/android-speeder/springcustomxml.git&quot;&gt;https://git.oschina.net/android-speeder/springcustomxml.git&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>bootcamp</title>
    <link href="http://yoursite.com/2016/07/18/bootcamp/"/>
    <id>http://yoursite.com/2016/07/18/bootcamp/</id>
    <published>2016-07-18T10:03:48.000Z</published>
    <updated>2016-11-24T09:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql_index_and_best_practice_handout"><a href="#mysql_index_and_best_practice_handout" class="headerlink" title="mysql index and best practice handout"></a>mysql index and best practice handout</h1><p>讲讲MySQL的最佳实践和容易踩到的坑。</p>
<a id="more"></a>
<h2 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tbl_name</span><br><span class="line">    (create_definition,...)</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tbl_name</span><br><span class="line">    [(create_definition,...)]</span><br><span class="line">    [table_options]</span><br><span class="line">    [partition_options]</span><br><span class="line">    [<span class="keyword">IGNORE</span> | <span class="keyword">REPLACE</span>]</span><br><span class="line">    [<span class="keyword">AS</span>] query_expression</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] tbl_name</span><br><span class="line">    &#123; <span class="keyword">LIKE</span> old_tbl_name | (<span class="keyword">LIKE</span> old_tbl_name) &#125;</span><br><span class="line"></span><br><span class="line">create_definition:</span><br><span class="line">    col_name column_definition</span><br><span class="line">  | [<span class="keyword">CONSTRAINT</span> [symbol]] PRIMARY <span class="keyword">KEY</span> [index_type] (index_col_name,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | &#123;<span class="keyword">INDEX</span>|<span class="keyword">KEY</span>&#125; [index_name] [index_type] (index_col_name,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | [<span class="keyword">CONSTRAINT</span> [symbol]] <span class="keyword">UNIQUE</span> [<span class="keyword">INDEX</span>|<span class="keyword">KEY</span>]</span><br><span class="line">      [index_name] [index_type] (index_col_name,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | &#123;FULLTEXT|SPATIAL&#125; [<span class="keyword">INDEX</span>|<span class="keyword">KEY</span>] [index_name] (index_col_name,...)</span><br><span class="line">      [index_option] ...</span><br><span class="line">  | [<span class="keyword">CONSTRAINT</span> [symbol]] FOREIGN <span class="keyword">KEY</span></span><br><span class="line">      [index_name] (index_col_name,...) reference_definition</span><br><span class="line">  | <span class="keyword">CHECK</span> (expr)</span><br><span class="line"></span><br><span class="line">column_definition:</span><br><span class="line">    data_type [<span class="keyword">NOT</span> <span class="literal">NULL</span> | <span class="literal">NULL</span>] [<span class="keyword">DEFAULT</span> default_value]</span><br><span class="line">      [AUTO_INCREMENT] [<span class="keyword">UNIQUE</span> [<span class="keyword">KEY</span>] | [PRIMARY] <span class="keyword">KEY</span>]</span><br><span class="line">      [<span class="keyword">COMMENT</span> <span class="string">'string'</span>]</span><br><span class="line">      [COLUMN_FORMAT &#123;<span class="keyword">FIXED</span>|DYNAMIC|<span class="keyword">DEFAULT</span>&#125;]</span><br><span class="line">      [<span class="keyword">STORAGE</span> &#123;DISK|<span class="keyword">MEMORY</span>|<span class="keyword">DEFAULT</span>&#125;]</span><br><span class="line">      [reference_definition]</span><br><span class="line">  | data_type [<span class="keyword">GENERATED</span> <span class="keyword">ALWAYS</span>] <span class="keyword">AS</span> (expression)</span><br><span class="line">      [<span class="keyword">VIRTUAL</span> | <span class="keyword">STORED</span>] [<span class="keyword">UNIQUE</span> [<span class="keyword">KEY</span>]] [<span class="keyword">COMMENT</span> <span class="keyword">comment</span>]</span><br><span class="line">      [<span class="keyword">NOT</span> <span class="literal">NULL</span> | <span class="literal">NULL</span>] [[PRIMARY] <span class="keyword">KEY</span>]</span><br><span class="line"></span><br><span class="line">data_type:</span><br><span class="line">    <span class="built_in">BIT</span>[(<span class="keyword">length</span>)]</span><br><span class="line">  | TINYINT[(<span class="keyword">length</span>)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">SMALLINT</span>[(<span class="keyword">length</span>)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | MEDIUMINT[(<span class="keyword">length</span>)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">INT</span>[(<span class="keyword">length</span>)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">INTEGER</span>[(<span class="keyword">length</span>)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">BIGINT</span>[(<span class="keyword">length</span>)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">REAL</span>[(<span class="keyword">length</span>,decimals)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="keyword">DOUBLE</span>[(<span class="keyword">length</span>,decimals)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">FLOAT</span>[(<span class="keyword">length</span>,decimals)] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">DECIMAL</span>[(<span class="keyword">length</span>[,decimals])] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">NUMERIC</span>[(<span class="keyword">length</span>[,decimals])] [<span class="keyword">UNSIGNED</span>] [ZEROFILL]</span><br><span class="line">  | <span class="built_in">DATE</span></span><br><span class="line">  | <span class="keyword">TIME</span>[(fsp)]</span><br><span class="line">  | <span class="keyword">TIMESTAMP</span>[(fsp)]</span><br><span class="line">  | DATETIME[(fsp)]</span><br><span class="line">  | <span class="keyword">YEAR</span></span><br><span class="line">  | <span class="built_in">CHAR</span>[(<span class="keyword">length</span>)] [<span class="built_in">BINARY</span>]</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | <span class="built_in">VARCHAR</span>(<span class="keyword">length</span>) [<span class="built_in">BINARY</span>]</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | <span class="built_in">BINARY</span>[(<span class="keyword">length</span>)]</span><br><span class="line">  | VARBINARY(<span class="keyword">length</span>)</span><br><span class="line">  | TINYBLOB</span><br><span class="line">  | <span class="built_in">BLOB</span></span><br><span class="line">  | MEDIUMBLOB</span><br><span class="line">  | LONGBLOB</span><br><span class="line">  | TINYTEXT [<span class="built_in">BINARY</span>]</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | <span class="built_in">TEXT</span> [<span class="built_in">BINARY</span>]</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | MEDIUMTEXT [<span class="built_in">BINARY</span>]</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | LONGTEXT [<span class="built_in">BINARY</span>]</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | ENUM(value1,value2,value3,...)</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | <span class="keyword">SET</span>(value1,value2,value3,...)</span><br><span class="line">      [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name] [<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">  | <span class="keyword">JSON</span></span><br><span class="line">  | spatial_type</span><br><span class="line"></span><br><span class="line">index_col_name:</span><br><span class="line">    col_name [(<span class="keyword">length</span>)] [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line">index_type:</span><br><span class="line">    <span class="keyword">USING</span> &#123;BTREE | <span class="keyword">HASH</span>&#125;</span><br><span class="line"></span><br><span class="line">index_option:</span><br><span class="line">    KEY_BLOCK_SIZE [=] <span class="keyword">value</span></span><br><span class="line">  | index_type</span><br><span class="line">  | <span class="keyword">WITH</span> PARSER parser_name</span><br><span class="line">  | <span class="keyword">COMMENT</span> <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line">reference_definition:</span><br><span class="line">    <span class="keyword">REFERENCES</span> tbl_name (index_col_name,...)</span><br><span class="line">      [<span class="keyword">MATCH</span> <span class="keyword">FULL</span> | <span class="keyword">MATCH</span> <span class="keyword">PARTIAL</span> | <span class="keyword">MATCH</span> SIMPLE]</span><br><span class="line">      [<span class="keyword">ON</span> <span class="keyword">DELETE</span> reference_option]</span><br><span class="line">      [<span class="keyword">ON</span> <span class="keyword">UPDATE</span> reference_option]</span><br><span class="line"></span><br><span class="line">reference_option:</span><br><span class="line">    RESTRICT | <span class="keyword">CASCADE</span> | <span class="keyword">SET</span> <span class="literal">NULL</span> | <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line"></span><br><span class="line">table_options:</span><br><span class="line">    table_option [[,] table_option] ...</span><br><span class="line"></span><br><span class="line">table_option:</span><br><span class="line">    <span class="keyword">ENGINE</span> [=] engine_name</span><br><span class="line">  | AUTO_INCREMENT [=] <span class="keyword">value</span></span><br><span class="line">  | AVG_ROW_LENGTH [=] <span class="keyword">value</span></span><br><span class="line">  | [<span class="keyword">DEFAULT</span>] <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> [=] charset_name</span><br><span class="line">  | <span class="keyword">CHECKSUM</span> [=] &#123;<span class="number">0</span> | <span class="number">1</span>&#125;</span><br><span class="line">  | [<span class="keyword">DEFAULT</span>] <span class="keyword">COLLATE</span> [=] collation_name</span><br><span class="line">  | <span class="keyword">COMMENT</span> [=] <span class="string">'string'</span></span><br><span class="line">  | COMPRESSION [=] &#123;<span class="string">'ZLIB'</span>|<span class="string">'LZ4'</span>|<span class="string">'NONE'</span>&#125;</span><br><span class="line">  | <span class="keyword">CONNECTION</span> [=] <span class="string">'connect_string'</span></span><br><span class="line">  | <span class="keyword">DATA</span> <span class="keyword">DIRECTORY</span> [=] <span class="string">'absolute path to directory'</span></span><br><span class="line">  | DELAY_KEY_WRITE [=] &#123;<span class="number">0</span> | <span class="number">1</span>&#125;</span><br><span class="line">  | ENCRYPTION [=] &#123;<span class="string">'Y'</span> | <span class="string">'N'</span>&#125;</span><br><span class="line">  | <span class="keyword">INDEX</span> <span class="keyword">DIRECTORY</span> [=] <span class="string">'absolute path to directory'</span></span><br><span class="line">  | INSERT_METHOD [=] &#123; <span class="keyword">NO</span> | <span class="keyword">FIRST</span> | <span class="keyword">LAST</span> &#125;</span><br><span class="line">  | KEY_BLOCK_SIZE [=] <span class="keyword">value</span></span><br><span class="line">  | MAX_ROWS [=] <span class="keyword">value</span></span><br><span class="line">  | MIN_ROWS [=] <span class="keyword">value</span></span><br><span class="line">  | PACK_KEYS [=] &#123;<span class="number">0</span> | <span class="number">1</span> | <span class="keyword">DEFAULT</span>&#125;</span><br><span class="line">  | <span class="keyword">PASSWORD</span> [=] <span class="string">'string'</span></span><br><span class="line">  | ROW_FORMAT [=] &#123;<span class="keyword">DEFAULT</span>|DYNAMIC|<span class="keyword">FIXED</span>|COMPRESSED|REDUNDANT|<span class="keyword">COMPACT</span>&#125;</span><br><span class="line">  | STATS_AUTO_RECALC [=] &#123;<span class="keyword">DEFAULT</span>|<span class="number">0</span>|<span class="number">1</span>&#125;</span><br><span class="line">  | STATS_PERSISTENT [=] &#123;<span class="keyword">DEFAULT</span>|<span class="number">0</span>|<span class="number">1</span>&#125;</span><br><span class="line">  | STATS_SAMPLE_PAGES [=] <span class="keyword">value</span></span><br><span class="line">  | <span class="keyword">TABLESPACE</span> tablespace_name</span><br><span class="line">  | <span class="keyword">UNION</span> [=] (tbl_name[,tbl_name]...)</span><br><span class="line"></span><br><span class="line">partition_options:</span><br><span class="line">    <span class="keyword">PARTITION</span> <span class="keyword">BY</span></span><br><span class="line">        &#123; [LINEAR] <span class="keyword">HASH</span>(expr)</span><br><span class="line">        | [LINEAR] <span class="keyword">KEY</span> [ALGORITHM=&#123;<span class="number">1</span>|<span class="number">2</span>&#125;] (column_list)</span><br><span class="line">        | <span class="keyword">RANGE</span>&#123;(expr) | <span class="keyword">COLUMNS</span>(column_list)&#125;</span><br><span class="line">        | <span class="keyword">LIST</span>&#123;(expr) | <span class="keyword">COLUMNS</span>(column_list)&#125; &#125;</span><br><span class="line">    [<span class="keyword">PARTITIONS</span> <span class="keyword">num</span>]</span><br><span class="line">    [<span class="keyword">SUBPARTITION</span> <span class="keyword">BY</span></span><br><span class="line">        &#123; [LINEAR] <span class="keyword">HASH</span>(expr)</span><br><span class="line">        | [LINEAR] <span class="keyword">KEY</span> [ALGORITHM=&#123;<span class="number">1</span>|<span class="number">2</span>&#125;] (column_list) &#125;</span><br><span class="line">      [<span class="keyword">SUBPARTITIONS</span> <span class="keyword">num</span>]</span><br><span class="line">    ]</span><br><span class="line">    [(partition_definition [, partition_definition] ...)]</span><br><span class="line"></span><br><span class="line">partition_definition:</span><br><span class="line">    <span class="keyword">PARTITION</span> partition_name</span><br><span class="line">        [<span class="keyword">VALUES</span></span><br><span class="line">            &#123;<span class="keyword">LESS</span> <span class="keyword">THAN</span> &#123;(expr | value_list) | MAXVALUE&#125;</span><br><span class="line">            |</span><br><span class="line">            <span class="keyword">IN</span> (value_list)&#125;]</span><br><span class="line">        [[<span class="keyword">STORAGE</span>] <span class="keyword">ENGINE</span> [=] engine_name]</span><br><span class="line">        [<span class="keyword">COMMENT</span> [=] <span class="string">'comment_text'</span> ]</span><br><span class="line">        [<span class="keyword">DATA</span> <span class="keyword">DIRECTORY</span> [=] <span class="string">'data_dir'</span>]</span><br><span class="line">        [<span class="keyword">INDEX</span> <span class="keyword">DIRECTORY</span> [=] <span class="string">'index_dir'</span>]</span><br><span class="line">        [MAX_ROWS [=] max_number_of_rows]</span><br><span class="line">        [MIN_ROWS [=] min_number_of_rows]</span><br><span class="line">        [<span class="keyword">TABLESPACE</span> [=] tablespace_name]</span><br><span class="line">        [(subpartition_definition [, subpartition_definition] ...)]</span><br><span class="line"></span><br><span class="line">subpartition_definition:</span><br><span class="line">    <span class="keyword">SUBPARTITION</span> logical_name</span><br><span class="line">        [[<span class="keyword">STORAGE</span>] <span class="keyword">ENGINE</span> [=] engine_name]</span><br><span class="line">        [<span class="keyword">COMMENT</span> [=] <span class="string">'comment_text'</span> ]</span><br><span class="line">        [<span class="keyword">DATA</span> <span class="keyword">DIRECTORY</span> [=] <span class="string">'data_dir'</span>]</span><br><span class="line">        [<span class="keyword">INDEX</span> <span class="keyword">DIRECTORY</span> [=] <span class="string">'index_dir'</span>]</span><br><span class="line">        [MAX_ROWS [=] max_number_of_rows]</span><br><span class="line">        [MIN_ROWS [=] min_number_of_rows]</span><br><span class="line">        [<span class="keyword">TABLESPACE</span> [=] tablespace_name]</span><br><span class="line"></span><br><span class="line">query_expression:</span><br><span class="line">    <span class="keyword">SELECT</span> ...   (<span class="keyword">Some</span> valid <span class="keyword">select</span> <span class="keyword">or</span> <span class="keyword">union</span> <span class="keyword">statement</span>)</span></span><br></pre></td></tr></table></figure>
<h2 id="u9009_u62E9_u5408_u9002_u7684_u6570_u636E_u7C7B_u578B"><a href="#u9009_u62E9_u5408_u9002_u7684_u6570_u636E_u7C7B_u578B" class="headerlink" title="选择合适的数据类型"></a>选择合适的数据类型</h2><p>物尽其用。如果存储空间较小的数据类型能满足需求，就不要使用更大的类型。</p>
<h3 id="u6574_u6570"><a href="#u6574_u6570" class="headerlink" title="整数"></a>整数</h3><p>TINYINT(8),SMALLINT(16),MEDIUMINT(24),INT(32),BIGINT(64) <unsigned>. 如果明确存储的值不为负数，加上unsigned可有效扩大值域范围。</unsigned></p>
<h3 id="u5B9E_u6570"><a href="#u5B9E_u6570" class="headerlink" title="实数"></a>实数</h3><p>虽然mysql提供了FLOAT,DOUBLE,DECIMAL来存储带精度的小数，但是实际开发中通常的做法是将其转换成整数存储，避免出现各种因精度导致的问题。</p>
<h3 id="u5B57_u7B26_u4E32"><a href="#u5B57_u7B26_u4E32" class="headerlink" title="字符串"></a>字符串</h3><h4 id="varchar"><a href="#varchar" class="headerlink" title="varchar"></a>varchar</h4><p>可变长，适用于大多数情况。</p>
<h4 id="char"><a href="#char" class="headerlink" title="char"></a>char</h4><p>选择合适的使用场景，如存储密码和手机号等等。</p>
<h3 id="u65E5_u671F_u548C_u65F6_u95F4"><a href="#u65E5_u671F_u548C_u65F6_u95F4" class="headerlink" title="日期和时间"></a>日期和时间</h3><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><p>保存时间范围从1001-9999，精度为秒，是mysql中表示时间范围最大的类型，且与时区无关。空间占用8字节。</p>
<h4 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h4><p>unix timestamp，表示从1970-01-01午夜开始的时间。可覆盖的最大时间为2038年，与时区相关，可根据时区自动变化，空间占用4字节。</p>
<p>这两种日期时间类型都只支持秒级别的数据，如果需要存储毫秒可以考虑使用bigint来存储。</p>
<h3 id="u8C28_u614E_u9009_u62E9_u6807_u8BC6_u7B26_u7C7B_u578B"><a href="#u8C28_u614E_u9009_u62E9_u6807_u8BC6_u7B26_u7C7B_u578B" class="headerlink" title="谨慎选择标识符类型"></a>谨慎选择标识符类型</h3><ol>
<li>整数类型。 整数是最理想的作为标识列的数据类型，比较很快，并且可以使用auto_increment. 顺序I/O的性能要比随机好很多。</li>
<li>字符串类型。 实际工作中可能会遇到使用UUID,SHA1产生的随机字符串来作为标识列，用字符串来作为标识列不仅消耗大而且比较慢，此外会导致插入，查询都变成随机I/O，而且可能会产生大量页分裂的情况，对性能有很大的影响。可考虑将其转换成整数存储。</li>
</ol>
<h2 id="u8868_u8BBE_u8BA1_u6CE8_u610F_u4E8B_u9879"><a href="#u8868_u8BBE_u8BA1_u6CE8_u610F_u4E8B_u9879" class="headerlink" title="表设计注意事项"></a>表设计注意事项</h2><h3 id="u5408_u7406_u7684_u5217_u957F_u5EA6"><a href="#u5408_u7406_u7684_u5217_u957F_u5EA6" class="headerlink" title="合理的列长度"></a>合理的列长度</h3><p>同一个表中不要设计过多的列，否则会导致数据行在mysql server和数据库引擎之前转换时产生较大的开销。</p>
<h3 id="u5408_u7406_u4F7F_u7528null"><a href="#u5408_u7406_u4F7F_u7528null" class="headerlink" title="合理使用null"></a>合理使用null</h3><p>前面说过尽量不要存在默认值为null的情况，但是如果实际情况确实为一个未知的值，也不能硬塞一个不合理的值充数，否则编写代码时还要对其进行特殊处理，更严重的是导致bug的产生。如数据库存在一个<code>-1</code>的默认值,在传递给iOS客户端时，如果客户端使用的类型是unsigned int，就会产生一个未知的整数，严重的导致应用崩溃，次之则是产生困惑的数据。</p>
<h2 id="null__u6BD4_u8F83_u67E5_u8BE2_u6CE8_u610F_u4E8B_u9879"><a href="#null__u6BD4_u8F83_u67E5_u8BE2_u6CE8_u610F_u4E8B_u9879" class="headerlink" title="null 比较查询注意事项"></a>null 比较查询注意事项</h2><p>不要使用 = &lt;&gt; 比较null值。使用 is null ,is not null. 灵活使用IF(),IFNULL(). 除非有特殊需要，尽量避免使用null值，null值会使得mysql很难对查询进行优化，尤其是不要在有索引的列上允许null存在。</p>
<h2 id="u5B57_u6BB5_u7EF4_u62A4_u6CE8_u610F_u4E8B_u9879"><a href="#u5B57_u6BB5_u7EF4_u62A4_u6CE8_u610F_u4E8B_u9879" class="headerlink" title="字段维护注意事项"></a>字段维护注意事项</h2><ol>
<li>新增字段尽量要有默认值,且设置为NOT NULL,有利于数据检索优化。</li>
<li>增加多个字段时，使用一条语句修改，避免多次单独创建。</li>
<li>字段新增或结构变化应该先于应用上线，避免上线后报SQL错误。</li>
<li>若是删除字段，应该等待应用上线运行稳定后再进行字段删除，避免误删。</li>
<li>若字段类型更改导致不兼容时，可能会停机维护，一般可通过其他方式避免停机。</li>
<li>若涉及索引变更，应在应用上线前增加新的索引，上线运行稳定之后再删除旧的索引。</li>
</ol>
<h2 id="u98CE_u683C"><a href="#u98CE_u683C" class="headerlink" title="风格"></a>风格</h2><h3 id="u547D_u540D"><a href="#u547D_u540D" class="headerlink" title="命名"></a>命名</h3><ul>
<li>采用26个英文字母(区分大小写)和0-9这十个自然数,加上下划线’_’组成,共63个字符.不能出现其他字符(注释除外).</li>
<li>外键名用<code>fk_开头，后面跟该外键所在的表名和对应的主表名（不含t_）</code>。子表名和父表名自己用下划线（<em>）分隔。外键名长度不能超过30个字符。如果过长，可对表名进行缩写。缩写规则同表名的缩写规则。外键名用小写的英文单词来表示。<br>唯一性索引用`uk</em>开头，后面跟字段名。一般性索引用idx_开头`，后面跟字段名</li>
<li>备份数据表名使用正式表名加上备份时间组成，如，<code>branch_user_20140326</code></li>
</ul>
<h3 id="u5EFA_u8868_u76F8_u5173"><a href="#u5EFA_u8868_u76F8_u5173" class="headerlink" title="建表相关"></a>建表相关</h3><ul>
<li>innodb建表，主键用无意义的自增主键。</li>
<li>禁用外键约束，由应用程序实现参照完整性</li>
<li>字段需设置为非空，需设置字段默认值。</li>
<li>用INNODB引擎建表。</li>
<li>表和每个字段都添加简短的comments</li>
<li>用尽量少的存储空间来存数一个字段的数据<ol>
<li>能用int的就不用char或者varchar</li>
<li>能用tinyint的就不用int</li>
<li>能用varchar(20)的就不用varchar(255)</li>
</ol>
</li>
<li><p>在建表语句后面加上使用的数据引擎和索引还有编码格式</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`db`</span>.<span class="string">`tbl_name`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">  <span class="string">`start_time`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uk_user`</span> (<span class="string">`user_id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'清理浏览记录的时间’;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改或者新建表的时候,不需要加库命，也不要写if not exist这种语句，建表之前请确定是否存在原表,比如</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`user_token`</span> <span class="keyword">add</span> <span class="keyword">column</span> <span class="string">`version`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="string">'版本号'</span>;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>而不是写<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`db`</span>.<span class="string">`user_token`</span> <span class="keyword">add</span> <span class="keyword">column</span> <span class="string">`version`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'版本号'</span>;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u4FEE_u6539_u8868_u7ED3_u6784"><a href="#u4FEE_u6539_u8868_u7ED3_u6784" class="headerlink" title="修改表结构"></a>修改表结构</h3><ul>
<li>多步合一,禁止单表多个更改字段，用多次alter table命令 ,在操作时，为了尽可能减少影响和操作时间，对同一个表进行的多步操作进行合并。比如对同一个表既加字段、又加索引，那么就应该写成一条语句。减少复制临时表的时间。</li>
<li>如果只是改变一个字段的默认值，那么使用<code>alter table user alter column id set default 5;</code>这种语法.</li>
</ul>
<h2 id="u57FA_u672C_u547D_u4EE4"><a href="#u57FA_u672C_u547D_u4EE4" class="headerlink" title="基本命令"></a>基本命令</h2><p><code>show databases</code>,<code>show tables</code>,<code>desc tableName</code>,<code>show create table tableName</code>.</p>
<h2 id="u67E5_u8BE2_u6280_u5DE7"><a href="#u67E5_u8BE2_u6280_u5DE7" class="headerlink" title="查询技巧"></a>查询技巧</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">where 1=1</span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">select</span></span><br><span class="line">g1.<span class="keyword">id</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">group</span> g1</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="number">1</span> = (<span class="keyword">select</span> <span class="keyword">count</span>(g2.<span class="keyword">id</span>) <span class="keyword">from</span> <span class="keyword">group</span> g2 <span class="keyword">where</span> g1.user_id=g2.user_id <span class="keyword">and</span> g1.created_time &lt;= g2.created_time );</span></span><br></pre></td></tr></table></figure>
<h2 id="u7D22_u5F15"><a href="#u7D22_u5F15" class="headerlink" title="索引"></a>索引</h2><h3 id="B_Tree__u7D22_u5F15"><a href="#B_Tree__u7D22_u5F15" class="headerlink" title="B Tree 索引"></a>B Tree 索引</h3><p>实现为B+ TREE.</p>
<h3 id="hash_u7D22_u5F15"><a href="#hash_u7D22_u5F15" class="headerlink" title="hash索引"></a>hash索引</h3><p>索引中存放的hash值和指向数据行的指针。</p>
<h3 id="u805A_u7C07_u7D22_u5F15_u3002"><a href="#u805A_u7C07_u7D22_u5F15_u3002" class="headerlink" title="聚簇索引。"></a>聚簇索引。</h3><p>聚簇索引严格来说不是一种索引类型，只是一种数据存储方式。主键就是一种聚簇索引，索引和数据行都存放在leaf上。</p>
<h3 id="u8986_u76D6_u7D22_u5F15"><a href="#u8986_u76D6_u7D22_u5F15" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>一个索引包含所有查询字段的值，则称为覆盖索引。<br>优点:</p>
<ol>
<li>可避免回表查询，极大提高效率。</li>
<li>完全顺序I/O。<br>缺点:<br>因为要存储列值，所以只适用于B TREE 索引。<h3 id="u7D22_u5F15_u5408_u5E76"><a href="#u7D22_u5F15_u5408_u5E76" class="headerlink" title="索引合并"></a>索引合并</h3>如果表中存在多个单列索引，在同时使用这几个单列索引时，mysql会采用一种索引合并的算法来同时使用这几个索引，这个过程会耗费大量的CPU和内存资源，出现这种情况可以说设计的索引就是一个失败的案例。 通过EXPALIN可以查看到是否使用了索引合并。<h3 id="u7D22_u5F15_u9009_u62E9_u6027"><a href="#u7D22_u5F15_u9009_u62E9_u6027" class="headerlink" title="索引选择性"></a>索引选择性</h3>索引选择性=唯一值/总记录数。 索引选择性越高查询性能越好。可以据此判断索引设计的好坏。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql_index_and_best_practice_handout&quot;&gt;&lt;a href=&quot;#mysql_index_and_best_practice_handout&quot; class=&quot;headerlink&quot; title=&quot;mysql index and best practice handout&quot;&gt;&lt;/a&gt;mysql index and best practice handout&lt;/h1&gt;&lt;p&gt;讲讲MySQL的最佳实践和容易踩到的坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>深入理解HashMap</title>
    <link href="http://yoursite.com/2016/06/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3HashMap/"/>
    <id>http://yoursite.com/2016/06/27/深入理解HashMap/</id>
    <published>2016-06-27T09:12:53.000Z</published>
    <updated>2016-11-24T09:52:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个Java开发者来说，最常用的Map结构莫过于HashMap。但我发现很多人对其内部是如何进行存储和查找的基本没什么概念或者有点概念但却是错误的或不全面的，对于靠这个吃饭的人来说，如果你不了解他，你怎么能放心的把你的数据交给他呢，这就好比把自己的饭碗交给了一个不认识的人，that’s terrible! 所以本文就带你深入理解一下HashMap, 内容大致涵盖如下几个方面:</p>
<ol>
<li>比较HashMap在java7和java8中的不同点</li>
<li>性能</li>
<li>可能的问题</li>
</ol>
<h1 id="u5B58_u50A8"><a href="#u5B58_u50A8" class="headerlink" title="存储"></a>存储</h1><p>HashMap实现了<code>Map&lt;K,V&gt;</code>，所以包含了以下几个主要的方法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">V <span class="function"><span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line">V <span class="function"><span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line">V <span class="function"><span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line">Boolean <span class="function"><span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>HashMap使用<code>Entry&lt;K, V&gt;</code>作为内部存储值的结构,基本结构:<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key; <span class="comment">// 键值</span></span><br><span class="line">    V value;<span class="comment">// 实际值</span></span><br><span class="line">    Entry&lt;K,V&gt; next; <span class="comment">// 下一条记录，构成一个单向链表</span></span><br><span class="line">    <span class="keyword">int</span> hash;<span class="comment">// key的hash值，出于性能上的考虑，这个值主要是为了避免重复计算hash值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>HashMap将数据存储在多个单向链表里面，这个单向链表通常叫做bucket，使用一个Entry<k,v>[]array来存储这些bucket. 这个array的默认大小为16.</k,v></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">  * The default initial capacity - MUST be a power of two.</span><br><span class="line">  */</span></span><br><span class="line"><span class="keyword">static</span> final <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure>
<p>这张示意图可以大致表示HashMap是怎么存的数据:</p>
<p><img src="http://ww4.sinaimg.cn/mw690/50508d62gw1f59y3ncsu4j20ta0ji0ty.jpg" alt="图例"></p>
<p><code>bucket array</code>的大小为n,i<sub>0</sub> 存储了3个entry构成的singly linked list,i<sub>1</sub>存了个null,i<sub>n-1</sub>只存了1个entry。</p>
<p>当调用put(K key, V value)或者get(Object key)时,就会根据key值计算相应的bucket在array中的index，然后进行添加或者获取Entry.</p>
<h2 id="u7D22_u5F15_u7684_u8BA1_u7B97_u65B9_u5F0F"><a href="#u7D22_u5F15_u7684_u8BA1_u7B97_u65B9_u5F0F" class="headerlink" title="索引的计算方式"></a>索引的计算方式</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java7</span></span><br><span class="line"><span class="function">final <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k instanceof String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java8</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> + Computes key.hashCode() and spreads (XORs) higher bits of hash</span><br><span class="line"> + to lower.  Because the table uses power-of-two masking, sets of</span><br><span class="line"> + hashes that vary only in bits above the current mask will</span><br><span class="line"> + always collide. (Among known examples are sets of Float keys</span><br><span class="line"> + holding consecutive whole numbers in small tables.)  So we</span><br><span class="line"> + apply a transform that spreads the impact of higher bits</span><br><span class="line"> + downward. There is a tradeoff between speed, utility, and</span><br><span class="line"> + quality of bit-spreading. Because many common sets of hashes</span><br><span class="line"> + are already reasonably distributed (so don't benefit from</span><br><span class="line"> + spreading), and because we use trees to handle large sets of</span><br><span class="line"> + collisions in bins, we just XOR some shifted bits in the</span><br><span class="line"> + cheapest possible way to reduce systematic lossage, as well as</span><br><span class="line"> + to incorporate impact of the highest bits that would otherwise</span><br><span class="line"> + never be used in index calculations because of table bounds.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> final <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == null) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Returns index for hash code h.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了高效的存取数据，bucket array的长度必须为2的指数次方，从上面默认大小16的注释上可以看到，接下来就解释一下为什么这个是必须的。</p>
<p>假设默认bucket array的默认大小是17，index即为h&amp;(17-1),16的二进制表示为00010000，此时无论h的是什么，h&amp;(17-1)的值只可能是16或者0，所以bucket array只有bucket 16和bucket 0能够被用到，其他都浪费了。但是如果bucket array的大小为2的指数次方，如默认大小2<sup>4</sup>，h&amp;15的结果值为0-15，每个bucket都被使用了，不存在浪费情况。</p>
<p>由此可以看出bucket array的大小为2<sup>n</sup>是很重要的，当你指定一个非2<sup>n</sup>得大小时，HashMap采取的策略是向上取下一个2的指数次方。</p>
<h1 id="u81EA_u52A8_u6269_u5C55"><a href="#u81EA_u52A8_u6269_u5C55" class="headerlink" title="自动扩展"></a>自动扩展</h1><p>在获取到bucket的index之后，就可以遍历bucket中的linked list了。设想我们的bucket中存储了大量数据，遍历linked list的时候就可能会产生性能问题。所以HashMap在发现自己存储的数据量超过某个阀值的时候就会自动对bucket array升级，即扩容。</p>
<p>HashMap提供了一个可指定初始容量和loadFactor的构造器:<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">HashMap</span>(<span class="built_in">int</span> initialCapacity, <span class="built_in">float</span> loadFactor)</span><br></pre></td></tr></table></figure></p>
<p>默认的<code>initialCapacity</code>为16，<code>loadFactor</code>为0.75.</p>
<p>每次调用put()时都会执行检查是否需要扩容，当<code>map.size&gt;(threshold=capacity*loadFactor)</code>bucket array的大小会扩展至原来的2倍,bucket的数量也增加了，所以随即发生的就是重新分布所有的元素。问题来了，为什么要这么做呢？扩展array bucket的主要目的就是减小bucket中的linked list的大小，这样才能快速的在其上进行CRUD操作。 在元素的重新分布之后，有相同hash值的存在同一个bucket中，之前在同一个bucket中但是hash值不一样的元素可能分配之后就不在同一个bucket中了。</p>
<p>过程如下图:</p>
<p><img src="http://ww2.sinaimg.cn/mw690/50508d62gw1f59y3lvrypj20q20lo75b.jpg" alt="初始结构"><br><img src="http://ww3.sinaimg.cn/mw690/50508d62gw1f59y3mj4myj20y80cwgmt.jpg" alt="扩展后的结构"></p>
<p><strong>HashMap虽然提供了扩容的机制，但没有提供相应的缩容机制。</strong></p>
<h1 id="u7EBF_u7A0B_u5B89_u5168"><a href="#u7EBF_u7A0B_u5B89_u5168" class="headerlink" title="线程安全"></a>线程安全</h1><p>大家都知道HashMap是非线程安全的，但深究过为什么麽？ 考虑如果一个写线程和一个读线程同时操作一个HashMap，写的时候如果发生扩容，那么读的时候就可能出现失败的现象，因为索引和list结构都变了。</p>
<p>HashMap的小伙伴HashTable的实现是线程安全的，因为其CRUD都做了同步操作，性能自然是不能同HashMap相比，除非在特殊场景，否则不推荐使用。</p>
<h1 id="key_u503C_u53EF_u53D8_u6027"><a href="#key_u503C_u53EF_u53D8_u6027" class="headerlink" title="key值可变性"></a>key值可变性</h1><p>通常我们可能会看到有人说最好是使用String and Integer作为Map的key值，但是为什么呢？ 主要原因是因为其<code>immutable</code>的特性。如果使用自己定义的对象作为key,请确保其hash不可变，否则可能丢失之前存储的数据。</p>
<h1 id="Java8_u7684_u53D8_u5316"><a href="#Java8_u7684_u53D8_u5316" class="headerlink" title="Java8的变化"></a>Java8的变化</h1><p>从代码量上来看就知道java8做了一些改进，java7的HashMap只有1000行左右的代码，java8却用了2000多行。<br>Java8新增了一个Node对象，结构和Entry是一样的:<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>bucket中存储的是这个新的Node对象。与Java7不同的地方是，Node可以扩展为TreeNode,TreeNode的实现是一个红黑树，这样增删等操作可以降到<code>O(log(n))</code>的级别。</p>
<p>TreeNode部分代码<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode&lt;K</span>,<span class="title">V&gt;</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">LinkedHashMap</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span> &#123;</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; left;</span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; right;</span><br><span class="line">    <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    boolean red;</span><br><span class="line">    <span class="type">TreeNode</span>(int hash, <span class="type">K</span> key, <span class="type">V</span> <span class="keyword">val</span>, <span class="type">Node</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, <span class="keyword">val</span>, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     + Returns root of tree containing this node.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; root() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">TreeNode</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p = r.parent) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            r = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用红黑树的一个主要好处就是当某个bucket中存在很多元素时，查找的时间为<code>O(log(n))</code>,而原来的为<code>O(n)</code>。</p>
<p>还有一点值得注意的是bucket中既可存放linked list,也可以存放TreeNode. 何时使用哪种结构取决于bucket中的元素个数。源码中定义了一个阀值:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> + The bin <span class="command">count</span> threshold <span class="keyword">for</span> using a tree rather than <span class="type">list</span> <span class="keyword">for</span> a</span><br><span class="line"> + bin.  Bins are converted <span class="keyword">to</span> trees when adding an element <span class="keyword">to</span> a</span><br><span class="line"> + bin <span class="keyword">with</span> <span class="keyword">at</span> least this many nodes. The value must be greater</span><br><span class="line"> + than <span class="number">2</span> <span class="keyword">and</span> should be <span class="keyword">at</span> least <span class="number">8</span> <span class="keyword">to</span> mesh <span class="keyword">with</span> assumptions <span class="keyword">in</span></span><br><span class="line"> + tree removal <span class="keyword">about</span> conversion <span class="keyword">back</span> <span class="keyword">to</span> plain bins upon</span><br><span class="line"> + shrinkage.</span><br><span class="line"> */</span><br><span class="line">static final int TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br></pre></td></tr></table></figure>
<p>超过8个就转换成TreeNode，否则就使用Linked List.</p>
<h1 id="u6027_u80FD_u95EE_u9898"><a href="#u6027_u80FD_u95EE_u9898" class="headerlink" title="性能问题"></a>性能问题</h1><p>HashMap性能是否过关，主要取决于hash function的设计是否合理。 hash function如果设计不合理，bucket array就不能够被充分利用，假设有<code>n(n&gt;=16)</code>个元素，bucket array长度为L,bucket<sub>i</sub>存储<code>k(k&lt;n/2)</code>个元素,另一个bucket<sub>j</sub>存储n-k个,如果是使用java7，查找最坏情况需要<code>O(n-k)</code>, 但如果均匀分布的话,java7就只需要<code>O(n/L)</code>.</p>
<p>之前说推荐使用String or Integer作为Key就是因为其有不错的hash function。</p>
<h1 id="u81EA_u52A8_u6269_u5C55_u7684_u5F00_u9500"><a href="#u81EA_u52A8_u6269_u5C55_u7684_u5F00_u9500" class="headerlink" title="自动扩展的开销"></a>自动扩展的开销</h1><p>前面已经讲过，当put()的时候达到临界值时就会对bucket array进行扩容，每次扩容都是一个开销很大的过程，如果提前知道自己需要多大的容量，推荐在创建HashMap的时候就设置好initialCapacity and loadFactor.</p>
<h1 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h1><p>对于日常开发来说，上述各方面可能会让你觉得没太大用处，但对于一个认真的开发者来说，我们不能仅仅做到知其然，更要做到知其所以然，这样我们才能好的利用这些工具为我们解决问题，并且在出现问题的时候能够快速定位和得出解决问题的方案。That is what makes you different!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个Java开发者来说，最常用的Map结构莫过于HashMap。但我发现很多人对其内部是如何进行存储和查找的基本没什么概念或者有点概念但却是错误的或不全面的，对于靠这个吃饭的人来说，如果你不了解他，你怎么能放心的把你的数据交给他呢，这就好比把自己的饭碗交给了一个不认识的人，that’s terrible! 所以本文就带你深入理解一下HashMap, 内容大致涵盖如下几个方面:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;比较HashMap在java7和java8中的不同点&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;可能的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;u5B58_u50A8&quot;&gt;&lt;a href=&quot;#u5B58_u50A8&quot; class=&quot;headerlink&quot; title=&quot;存储&quot;&gt;&lt;/a&gt;存储&lt;/h1&gt;&lt;p&gt;HashMap实现了&lt;code&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt;，所以包含了以下几个主要的方法:&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;V &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(K key, V value)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>effective-java-methods</title>
    <link href="http://yoursite.com/2016/06/22/effective-java-methods/"/>
    <id>http://yoursite.com/2016/06/22/effective-java-methods/</id>
    <published>2016-06-22T06:34:20.000Z</published>
    <updated>2016-11-24T09:52:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h1><p>“usability, robustness, and flexibility.”</p>
<p>摘录来自: Joshua Bloch. “Effective Java (Jason Arnold’s Library)”。 iBooks. </p>
<h2 id="u68C0_u67E5_u53C2_u6570_u6709_u6548_u6027_28check_validity_of_params_29"><a href="#u68C0_u67E5_u53C2_u6570_u6709_u6548_u6027_28check_validity_of_params_29" class="headerlink" title="检查参数有效性(check validity of params)"></a>检查参数有效性(check validity of params)</h2><p>早检查早发现早避免问题。Fail fast!</p>
<p>未检查参数有效性可能导致的问题:</p>
<ol>
<li>在执行过程中失败并抛出掩盖问题的异常。</li>
<li>正常返回但是返回的是错误的结果。</li>
<li>同样是正常返回，但是埋下了祸根，可能产生了其他状态有问题的数据，导致在不定时的将来产生不可预知的问题。</li>
</ol>
<a id="more"></a>
<h2 id="u629B_u51FA_u5F02_u5E38"><a href="#u629B_u51FA_u5F02_u5E38" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>对需要抛出异常的public方法，应该使用@throws说明。常见的如:<code>IllegalArgumentException</code>,<code>NPE</code>,<code>IndexOutOfBoundsException</code> etc. </p>
<p>对于需要抛出异常的方法，应该使用javadoc尽量说明抛出该异常的具体条件，并且抛出异常时应该抛出具体的异常而不是一个父类，如避免抛出exception or throwable,让使用该方法的人知道如何合理有效的使用你提供的方法。</p>
<p>对于nonpublic类型的方法，是由维护人员控制的，所以维护人员应该保证传入的参数都是有效的，只需要做assertion判断就行，没必要再检查然后抛出异常。</p>
<h2 id="u5931_u8D25_u539F_u5B50_u6027_28failure_atomicity_29"><a href="#u5931_u8D25_u539F_u5B50_u6027_28failure_atomicity_29" class="headerlink" title="失败原子性(failure atomicity)"></a>失败原子性(failure atomicity)</h2><p>一般来说，一个失败的方法调用如果将处理的目标对象还原为调用方法之前的状态，就能称为是失败原子性的。<br>通常达到这个效果的做法:</p>
<ul>
<li>使用immutable object.</li>
<li>针对mutable object，常用方法就是检查参数的有效性，fail before modification!</li>
</ul>
<p>Talking is cheap, time to show some code!</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">  * Deletes the component at the specified index. Each component in</span><br><span class="line">  * this vector with an index greater or equal to the specified</span><br><span class="line">  * &#123;<span class="doctag">@code</span> index&#125; is shifted downward to have an index one</span><br><span class="line">  * smaller than the value it had previously. The size of this vector</span><br><span class="line">  * is decreased by &#123;<span class="doctag">@code</span> 1&#125;.</span><br><span class="line">  *</span><br><span class="line">  * &lt;p&gt;The index must be a value greater than or equal to &#123;<span class="doctag">@code</span> 0&#125;</span><br><span class="line">  * and less than the current size of the vector.</span><br><span class="line">  *</span><br><span class="line">  * &lt;p&gt;This method is identical in functionality to the &#123;<span class="doctag">@link</span> #remove(int)&#125;</span><br><span class="line">  * method (which is part of the &#123;<span class="doctag">@link</span> List&#125; interface).  Note that the</span><br><span class="line">  * &#123;<span class="doctag">@code</span> remove&#125; method returns the old value that was stored at the</span><br><span class="line">  * specified position.</span><br><span class="line">  *</span><br><span class="line">  * <span class="doctag">@param</span>      index   the index of the object to remove</span><br><span class="line">  * <span class="doctag">@throws</span> ArrayIndexOutOfBoundsException if the index is out of range</span><br><span class="line">  *         (&#123;<span class="doctag">@code</span> index &lt; 0 || index &gt;= size()&#125;)</span><br><span class="line">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     modCount++;</span><br><span class="line">     <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> +</span><br><span class="line">                                                  elementCount);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> j = elementCount - index - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</span><br><span class="line">     &#125;</span><br><span class="line">     elementCount--;</span><br><span class="line">     elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>这段代码取自Vector中。在移除元素时提前检查数组是否越界，并在javadoc中使用<code>@throws</code>说明抛出的异常和触发条件。</p>
<ul>
<li>复制替换. 复制一份原始数据，对副本进行操作，顺利完成之后再替换原始数据。 如Collections.sort()在进行排序之前就是先将原始数据存在一个数组中，如果排序失败，原始数据原封不动。</li>
<li>JDK source code:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">    Arrays.sort(a, (Comparator) c);</span><br><span class="line">    ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">    <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">        i.next();</span><br><span class="line">        i.set((E) e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>就以上看来，方法参数限制越严密越好，其实不然，如果一个方法对传入的参数都能够优雅的处理不用太多的限制对于使用该方法的人来说无疑是一大福音。</p>
<p><strong>以上这几点看上去很简单朴实，但如果真正遵守并养成这些习惯，对代码质量的提高是可见一斑的。</strong></p>
<h2 id="u4FDD_u62A4_u6027_u590D_u5236_28Defensive_copy_29"><a href="#u4FDD_u62A4_u6027_u590D_u5236_28Defensive_copy_29" class="headerlink" title="保护性复制(Defensive copy)"></a>保护性复制(Defensive copy)</h2><p>保护性复制是保护对象不变性，健壮性的一种策略。API提供者本意是想提供一个可靠稳定的对象，但往往不经意间对象的内部状态就被API的使用者所更改了，而且是无意识的。举个栗子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Period</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Date start;</span><br><span class="line">        <span class="keyword">private</span> Date end;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * </span><br><span class="line">         * <span class="doctag">@param</span> start</span><br><span class="line">         * <span class="doctag">@param</span> end</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@throws</span> IllegalArgumentException if start is greater than end</span><br><span class="line">         * <span class="doctag">@throws</span> NullPointerException if start or end is null</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Period</span><span class="params">(Date start, Date end)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start.compareTo(end)&gt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"start must less than end"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.start = <span class="keyword">new</span> Date(start);</span><br><span class="line">            <span class="keyword">this</span>.end = <span class="keyword">new</span> Date(end);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Date <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// return new Date(start);</span></span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Date <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// return new Date(end);</span></span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>The invariants of period can be broken easily!</strong><br>传入start和end后，对start和end的修改会直接影响Period的内部状态,使用get方法获取到日期后也可以修改对象的内部状态,可以说这就是发布了一个不安全的对象。使用defensive copy就可以修复这个问题,在构造器和getter方法中都复制一份源对象即可。另外一种技巧也可以解决这个问题，period内部使用long来存储时间，就不用担心状态被更改。</p>
<h2 id="u8C28_u614E_u8BBE_u8BA1_u65B9_u6CD5_u7B7E_u540D"><a href="#u8C28_u614E_u8BBE_u8BA1_u65B9_u6CD5_u7B7E_u540D" class="headerlink" title="谨慎设计方法签名"></a>谨慎设计方法签名</h2><h3 id="u9009_u62E9_u6709_u610F_u4E49_u7684_u540D_u5B57"><a href="#u9009_u62E9_u6709_u610F_u4E49_u7684_u540D_u5B57" class="headerlink" title="选择有意义的名字"></a>选择有意义的名字</h3><p>遵守约定的命名规范，如变量名词，方法动词开头等。</p>
<h3 id="u4E0D_u8981_u8FC7_u5EA6_u63D0_u4F9B_u5DE5_u5177_u65B9_u6CD5"><a href="#u4E0D_u8981_u8FC7_u5EA6_u63D0_u4F9B_u5DE5_u5177_u65B9_u6CD5" class="headerlink" title="不要过度提供工具方法"></a>不要过度提供工具方法</h3><p>过多的方法导致对象的维护难度提高，易用性下降。特别是对于接口而言，过多的方法导致实现起来比较困难，Think before in doing anything! 如果觉得没必要就不提供。</p>
<h3 id="u907F_u514D_u8FC7_u957F_u7684_u53C2_u6570_u5217_u8868"><a href="#u907F_u514D_u8FC7_u957F_u7684_u53C2_u6570_u5217_u8868" class="headerlink" title="避免过长的参数列表"></a>避免过长的参数列表</h3><p>参数尽量不要超过四个，多了使用起来容易出错，特别当有多个相同类型的参数存在的时候,如果顺序弄错了，最终结果总是不对，也很难发下bug的所在。</p>
<p>针对参数过多的情况常见的应对方式有:</p>
<ol>
<li>拆分成几个方法，有可能会产生很多方法。</li>
<li>新建一个helper类包含这些参数，再将这个helper类作为参数传入。</li>
<li>利用Builder pattern。</li>
</ol>
<h3 id="u4F18_u5148_u4F7F_u7528_u63A5_u53E3_u7C7B_u578B_u4F5C_u4E3A_u53C2_u6570_u800C_u4E0D_u662F_u5B9E_u73B0_u7C7B"><a href="#u4F18_u5148_u4F7F_u7528_u63A5_u53E3_u7C7B_u578B_u4F5C_u4E3A_u53C2_u6570_u800C_u4E0D_u662F_u5B9E_u73B0_u7C7B" class="headerlink" title="优先使用接口类型作为参数而不是实现类"></a>优先使用接口类型作为参数而不是实现类</h3><p>这个没什么好说的.</p>
<h3 id="u4F7F_u7528_u542B_u6709_u4E24_u4E2A_u5143_u7D20_u7684_u679A_u4E3E_u4EE3_u66FFboolean_u7C7B_u578B"><a href="#u4F7F_u7528_u542B_u6709_u4E24_u4E2A_u5143_u7D20_u7684_u679A_u4E3E_u4EE3_u66FFboolean_u7C7B_u578B" class="headerlink" title="使用含有两个元素的枚举代替boolean类型"></a>使用含有两个元素的枚举代替boolean类型</h3><p>使用枚举不仅可读性更强，而且更容易扩展，可以添加其他选项和做转换处理等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Methods&quot;&gt;&lt;a href=&quot;#Methods&quot; class=&quot;headerlink&quot; title=&quot;Methods&quot;&gt;&lt;/a&gt;Methods&lt;/h1&gt;&lt;p&gt;“usability, robustness, and flexibility.”&lt;/p&gt;
&lt;p&gt;摘录来自: Joshua Bloch. “Effective Java (Jason Arnold’s Library)”。 iBooks. &lt;/p&gt;
&lt;h2 id=&quot;u68C0_u67E5_u53C2_u6570_u6709_u6548_u6027_28check_validity_of_params_29&quot;&gt;&lt;a href=&quot;#u68C0_u67E5_u53C2_u6570_u6709_u6548_u6027_28check_validity_of_params_29&quot; class=&quot;headerlink&quot; title=&quot;检查参数有效性(check validity of params)&quot;&gt;&lt;/a&gt;检查参数有效性(check validity of params)&lt;/h2&gt;&lt;p&gt;早检查早发现早避免问题。Fail fast!&lt;/p&gt;
&lt;p&gt;未检查参数有效性可能导致的问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在执行过程中失败并抛出掩盖问题的异常。&lt;/li&gt;
&lt;li&gt;正常返回但是返回的是错误的结果。&lt;/li&gt;
&lt;li&gt;同样是正常返回，但是埋下了祸根，可能产生了其他状态有问题的数据，导致在不定时的将来产生不可预知的问题。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="effective" scheme="http://yoursite.com/tags/effective/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>how-to-create-products-customers-love</title>
    <link href="http://yoursite.com/2016/05/14/how-to-create-products-customers-love/"/>
    <id>http://yoursite.com/2016/05/14/how-to-create-products-customers-love/</id>
    <published>2016-05-14T15:11:20.000Z</published>
    <updated>2016-11-24T09:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="My_Opinion"><a href="#My_Opinion" class="headerlink" title="My Opinion"></a>My Opinion</h1><p>一个不错的开发者有很大的潜力能成为一个不错的PM。PM这里不仅仅指product manager but also means project manager. 出于对PM的兴趣，近期在尝试看一些PM相关的书，总结了一些Keynote供后续回顾。</p>
<h1 id="u4EA7_u54C1_u7BA1_u7406_26amp_3B_u9879_u76EE_u7BA1_u7406"><a href="#u4EA7_u54C1_u7BA1_u7406_26amp_3B_u9879_u76EE_u7BA1_u7406" class="headerlink" title="产品管理&amp;项目管理"></a>产品管理&amp;项目管理</h1><ul>
<li>产品管理更多是探索定义产品功能，验证产品可行可用性，发现产品价值。 协调交互设计，视觉设计，原型设计进度与流程。产品在设计每个周期开发功能的时候尽量留出20%的时间供开发人员优化代码和修复可能的问题。(this is called headroom)</li>
<li>项目管理控制项目进度，合理分配资源，解决项目过程中出现的各种问题，保证项目按时按质交付。</li>
</ul>
<a id="more"></a>
<h1 id="u5BFB_u627E_u5408_u9002_u7684_u4EA7_u54C1_u7ECF_u7406"><a href="#u5BFB_u627E_u5408_u9002_u7684_u4EA7_u54C1_u7ECF_u7406" class="headerlink" title="寻找合适的产品经理"></a>寻找合适的产品经理</h1><p>公司内部其他岗位上的人员，开发人员，设计人员等都可能是很好的产品经理备选人员，等待发掘。</p>
<h2 id="u4F18_u79C0_u4EA7_u54C1_u7ECF_u7406_u7684_u7D20_u8D28"><a href="#u4F18_u79C0_u4EA7_u54C1_u7ECF_u7406_u7684_u7D20_u8D28" class="headerlink" title="优秀产品经理的素质"></a>优秀产品经理的素质</h2><ol>
<li>对产品的热情</li>
<li>用户立场</li>
<li>判断力和决策力</li>
<li>职业操守</li>
<li>信心</li>
<li>态度</li>
<li>技能</li>
<li>注意力</li>
<li>时间管理</li>
<li>沟通技能</li>
<li>商业技能<br>PM通常需要与上级其他部门沟通，为了使沟通有效需要熟悉他们常说的概念和术语。如成功构成，边际效应，市场份额，产品定位和品牌等。所以需要一定的商业技能。</li>
</ol>
<h1 id="u7BA1_u7406_u4EA7_u54C1_u7ECF_u7406"><a href="#u7BA1_u7406_u4EA7_u54C1_u7ECF_u7406" class="headerlink" title="管理产品经理"></a>管理产品经理</h1><p>这份工作通常由产品总监来完成。主要有两方面的职责:</p>
<ol>
<li>组建优秀的产品团队。</li>
<li>规划产品全局战略，对产品组合负责。</li>
</ol>
<h2 id="u5EFA_u8BBE_u4EA7_u54C1_u56E2_u961F"><a href="#u5EFA_u8BBE_u4EA7_u54C1_u56E2_u961F" class="headerlink" title="建设产品团队"></a>建设产品团队</h2><p>简单来说，发现适合做产品管理的人员，同时找出不适合的人员。发现有做产品潜质的人员时，应尽量给予其足够的时间和信任并监督和指导其不断进步，这样不仅提高了手下的能力，也是对自己能力的一种扩大，手下产品做得好也就是自己产品做得好。有些人天生就不合适做产品，所以需要及时发现以免浪费研发的时间和失去用户对产品的信任。</p>
<h2 id="u89C4_u5212_u516C_u53F8_u7684_u4EA7_u54C1_u6218_u7565"><a href="#u89C4_u5212_u516C_u53F8_u7684_u4EA7_u54C1_u6218_u7565" class="headerlink" title="规划公司的产品战略"></a>规划公司的产品战略</h2><p>结合公司的商业战略规划产品战略，做到商业与用户需求的完美结合。同时需要解决不同产品经理提出的方案的冲突，做好整体产品的组合和规划。</p>
<h1 id="u5DF4_u987F_u5C06_u519B_u7684_u5FE0_u544A"><a href="#u5DF4_u987F_u5C06_u519B_u7684_u5FE0_u544A" class="headerlink" title="巴顿将军的忠告"></a>巴顿将军的忠告</h1><h2 id="u76EE_u6807_u7BA1_u7406"><a href="#u76EE_u6807_u7BA1_u7406" class="headerlink" title="目标管理"></a>目标管理</h2><p>在构思一个产品功能且未形成最终方案的时候，应该充分发挥视觉设计，交互设计师的个人创造力，应该告诉他们接下来要做什么，而不是告诉他们如何做。让他们根据自己对市场的理解和对用户的调研来发挥想象。</p>
<h1 id="u8BC4_u4F30_u4EA7_u54C1_u673A_u4F1A"><a href="#u8BC4_u4F30_u4EA7_u54C1_u673A_u4F1A" class="headerlink" title="评估产品机会"></a>评估产品机会</h1><p>评估产品机会是产品经理的重要职责，通过评估产品机会可以淘汰bad idea,避免资源浪费。尤其对于资源有限的创业公司而言。</p>
<p>为了评估产品机会，可以要求产品经理回答以下几个问题:</p>
<ol>
<li>产品要解决什么问题?(产品价值)</li>
<li>为谁解决这个问题?(目标市场)</li>
<li>成功的机会有多大?(市场规模)</li>
<li>怎样判断产品成功与否?(度量指标或收益指标)</li>
<li>有哪些同类产品?(竞品分析)</li>
<li>为什么我们最适合做这个产品?(竞争优势)</li>
<li>时机是否合适?(市场时机)</li>
<li>如何把产品推向市场?(营销组合策略)</li>
<li>成功的必要条件是什么?(解决方案要满足的条件) </li>
<li>根据以上问题，得出评估结论?(继续或放弃)</li>
</ol>
<p>评估产品机会的时候不应该与具体解决方案一起讨论，否则容易造成具体方案遇到困难时就直接把产品机会一起否定掉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;My_Opinion&quot;&gt;&lt;a href=&quot;#My_Opinion&quot; class=&quot;headerlink&quot; title=&quot;My Opinion&quot;&gt;&lt;/a&gt;My Opinion&lt;/h1&gt;&lt;p&gt;一个不错的开发者有很大的潜力能成为一个不错的PM。PM这里不仅仅指product manager but also means project manager. 出于对PM的兴趣，近期在尝试看一些PM相关的书，总结了一些Keynote供后续回顾。&lt;/p&gt;
&lt;h1 id=&quot;u4EA7_u54C1_u7BA1_u7406_26amp_3B_u9879_u76EE_u7BA1_u7406&quot;&gt;&lt;a href=&quot;#u4EA7_u54C1_u7BA1_u7406_26amp_3B_u9879_u76EE_u7BA1_u7406&quot; class=&quot;headerlink&quot; title=&quot;产品管理&amp;amp;项目管理&quot;&gt;&lt;/a&gt;产品管理&amp;amp;项目管理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;产品管理更多是探索定义产品功能，验证产品可行可用性，发现产品价值。 协调交互设计，视觉设计，原型设计进度与流程。产品在设计每个周期开发功能的时候尽量留出20%的时间供开发人员优化代码和修复可能的问题。(this is called headroom)&lt;/li&gt;
&lt;li&gt;项目管理控制项目进度，合理分配资源，解决项目过程中出现的各种问题，保证项目按时按质交付。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="PM" scheme="http://yoursite.com/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>Build-rest-api</title>
    <link href="http://yoursite.com/2016/04/27/Build-rest-api/"/>
    <id>http://yoursite.com/2016/04/27/Build-rest-api/</id>
    <published>2016-04-27T08:41:13.000Z</published>
    <updated>2016-11-24T09:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why_REST_3F"><a href="#Why_REST_3F" class="headerlink" title="Why REST?"></a>Why REST?</h1><ol>
<li>Scalability</li>
<li>Generality</li>
<li>Independence</li>
<li>Latency (Caching)</li>
<li>Security</li>
<li>Encapsulation</li>
</ol>
<h1 id="Why_JSON_3F"><a href="#Why_JSON_3F" class="headerlink" title="Why JSON?"></a>Why JSON?</h1><ol>
<li>Ubiquity</li>
<li>Simplicity</li>
<li>Readability</li>
<li>Scalability</li>
<li>Flexibility</li>
</ol>
<a id="more"></a>
<h1 id="Keep_it_simple"><a href="#Keep_it_simple" class="headerlink" title="Keep it simple"></a>Keep it simple</h1><p>Rest简单理解就是对资源的管理。资源可分为基本的两类:</p>
<ol>
<li>集合资源, <code>/resources</code></li>
<li>单个资源, <code>/resources/123</code></li>
</ol>
<p>在对资源进行命名时，不用纠结使用单数还是复数，最好始终采用复数形式，保持URL的简单和一致。</p>
<h1 id="HTTP_Verb"><a href="#HTTP_Verb" class="headerlink" title="HTTP Verb"></a>HTTP Verb</h1><p>这个如今到处都有讲解，我就简单说明一下。</p>
<ol>
<li>GET = Read</li>
<li>PUT</li>
<li>POST</li>
<li>PATCH = Partially updates</li>
<li>DELETE = Delete</li>
<li>HEAD = Headers, no Body</li>
</ol>
<p>这几个Verbs并非与CRUD一一对应的, <code>^_^</code> . PUT和POST这两个都可以用来create和update,但他们还是有一点区别的。</p>
<h2 id="PUT_-_Create"><a href="#PUT_-_Create" class="headerlink" title="PUT - Create"></a>PUT - Create</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">PUT</span> /<span class="tag">resources</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    根据提供的数据替换现有的全部相关的资源</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PUT_-_Update"><a href="#PUT_-_Update" class="headerlink" title="PUT - Update"></a>PUT - Update</h2><p>根据指定的ID create or update现有的资源。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /resources/<span class="property">id</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    根据<span class="property">id</span>更新或者新建一个资源</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="POST_-_Create"><a href="#POST_-_Create" class="headerlink" title="POST - Create"></a>POST - Create</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /resources</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"desc"</span>: <span class="string">"i am gonna be created every time"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response:</span><br><span class="line"></span><br><span class="line"><span class="number">201</span> Created</span><br><span class="line">Location: https:<span class="comment">//api.daveztong.com/resources/123x</span></span><br><span class="line"></span><br><span class="line">其中<span class="number">123</span>x是新建的资源ID</span><br></pre></td></tr></table></figure>
<h2 id="POST_-_Update"><a href="#POST_-_Update" class="headerlink" title="POST - Update"></a>POST - Update</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /resources/<span class="number">123</span>x</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"desc"</span>: <span class="string">"123x被当做是一个集合,并创建一个属于123x的资源"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response:</span><br><span class="line"><span class="number">200</span> OK</span><br></pre></td></tr></table></figure>
<h2 id="The_difference_3F"><a href="#The_difference_3F" class="headerlink" title="The difference?"></a>The difference?</h2><p>PUT操作是幂等的,POST非幂等。PUT的每一次操作在既定情况下都得到相同的结果,POST却是每一次都不同。</p>
<h1 id="Best_practises"><a href="#Best_practises" class="headerlink" title="Best practises"></a>Best practises</h1><h3 id="u57FA_u7840"><a href="#u57FA_u7840" class="headerlink" title="基础"></a>基础</h3><h4 id="u9694_u79BB_u5173_u6CE8_u70B9"><a href="#u9694_u79BB_u5173_u6CE8_u70B9" class="headerlink" title="隔离关注点"></a>隔离关注点</h4><p>设计时通过将请求和响应之间的不同部分隔离来让事情变得简单。保持简单的规则让我们能更关注在一些更大的更困难的问题上。</p>
<p>请求和响应将解决一个特定的资源或集合。使用路径（path）来表明身份，body来传输内容（content）还有头信息（header）来传递元数据（metadata）。查询参数同样可以用来传递头信息的内容，但头信息是首选，因为他们更灵活、更能传达不同的信息。</p>
<h4 id="u5F3A_u5236_u4F7F_u7528_u5B89_u5168_u8FDE_u63A5_uFF08Secure_Connections_uFF09"><a href="#u5F3A_u5236_u4F7F_u7528_u5B89_u5168_u8FDE_u63A5_uFF08Secure_Connections_uFF09" class="headerlink" title="强制使用安全连接（Secure Connections）"></a>强制使用安全连接（Secure Connections）</h4><p>所有的访问API行为，都需要用 TLS 通过安全连接来访问。没有必要搞清或解释什么情况需要 TLS 什么情况不需要 TLS，直接强制任何访问都要通过 TLS。</p>
<p>理想状态下，通过拒绝所有非 TLS 请求，不响应 http 或80端口的请求以避免任何不安全的数据交换。如果现实情况中无法这样做，可以返回<code>403 Forbidden</code>响应。</p>
<p>把非 TLS 的请求重定向(Redirect)至 TLS 连接是不明智的，这种含混/不好的客户端行为不会带来明显好处。依赖于重定向的客户端访问不仅会导致双倍的服务器负载，还会使 TLS 加密失去意义，因为在首次非 TLS 调用时，敏感信息就已经暴露出去了。</p>
<h4 id="u5F3A_u5236_u5934_u4FE1_u606F_Accept__u4E2D_u63D0_u4F9B_u7248_u672C_u53F7"><a href="#u5F3A_u5236_u5934_u4FE1_u606F_Accept__u4E2D_u63D0_u4F9B_u7248_u672C_u53F7" class="headerlink" title="强制头信息 Accept 中提供版本号"></a>强制头信息 Accept 中提供版本号</h4><p>制定版本并在版本之间平缓过渡对于设计和维护一套API是个巨大的挑战。所以，最好在设计之初就使用一些方法来预防可能会遇到的问题。</p>
<p>为了避免API的变动导致用户使用中产生意外结果或调用失败，<strong>最好强制要求所有访问都需要指定版本号。请避免提供默认版本号，一旦提供，日后想要修改它会相当困难。</strong></p>
<p>最适合放置版本号的位置是头信息(HTTP Headers)，在 <code>Accept</code> 段中使用自定义类型(content type)与其他元数据(metadata)一起提交。例如:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: <span class="type">application</span>/vnd.heroku+json; <span class="property">version</span>=<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h4 id="u652F_u6301Etag_u7F13_u5B58"><a href="#u652F_u6301Etag_u7F13_u5B58" class="headerlink" title="支持Etag缓存"></a>支持Etag缓存</h4><p>在所有返回的响应中包含<code>ETag</code>头信息，用来标识资源的版本。这让用户对资源进行缓存处理成为可能，在后续的访问请求中把<code>If-None-Match</code>头信息设置为之前得到的<code>ETag</code>值，就可以侦测到已缓存的资源是否需要更新。</p>
<h4 id="u4E3A_u5185_u7701_u800C_u63D0_u4F9B_Request-Id"><a href="#u4E3A_u5185_u7701_u800C_u63D0_u4F9B_Request-Id" class="headerlink" title="为内省而提供 Request-Id"></a>为内省而提供 Request-Id</h4><p>为每一个请求响应包含一个<code>Request-Id</code>头，并使用UUID作为该值。通过在客户端、服务器或任何支持服务上记录该值，它能为我们提供一种机制来跟踪、诊断和调试请求。</p>
<p>###请求（Requests）</p>
<h4 id="u5728_u8BF7_u6C42_u7684body_u4F53_u4F7F_u7528JSON_u683C_u5F0F_u6570_u636E"><a href="#u5728_u8BF7_u6C42_u7684body_u4F53_u4F7F_u7528JSON_u683C_u5F0F_u6570_u636E" class="headerlink" title="在请求的body体使用JSON格式数据"></a>在请求的body体使用JSON格式数据</h4><p>在 <code>PUT</code>/<code>PATCH</code>/<code>POST</code> 请求的正文（request bodies）中使用JSON格式数据，而不是使用 form 表单形式的数据。这与我们使用JSON格式返回请求相对应，例如:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X <span class="keyword">POST</span> https:<span class="comment">//service.com/apps \</span></span><br><span class="line">    -<span class="keyword">H</span> <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">    -<span class="keyword">d</span> '&#123;<span class="string">"name"</span>: <span class="string">"demoapp"</span>&#125;'</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"demoapp"</span>,</span><br><span class="line">  <span class="string">"owner"</span>: &#123;</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"username@example.com"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4F7F_u7528_u7EDF_u4E00_u7684_u8D44_u6E90_u8DEF_u5F84_u683C_u5F0F"><a href="#u4F7F_u7528_u7EDF_u4E00_u7684_u8D44_u6E90_u8DEF_u5F84_u683C_u5F0F" class="headerlink" title="使用统一的资源路径格式"></a>使用统一的资源路径格式</h4><h5 id="u8D44_u6E90_u540D_uFF08Resource_names_uFF09"><a href="#u8D44_u6E90_u540D_uFF08Resource_names_uFF09" class="headerlink" title="资源名（Resource names）"></a>资源名（Resource names）</h5><p>使用复数形式为资源命名，除非这个资源在系统中是单例的 (例如，在大多数系统中，给定的用户帐户只有一个)。 这种方式保持了特定资源的统一性。</p>
<h5 id="u884C_u4E3A_uFF08Actions_uFF09"><a href="#u884C_u4E3A_uFF08Actions_uFF09" class="headerlink" title="行为（Actions）"></a>行为（Actions）</h5><p>好的末尾不需要为资源指定特殊的行为，但在特殊情况下，为某些资源指定行为却是必要的。为了描述清楚，在行为前加上一个标准的<code>actions</code>：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/resources/<span class="symbol">:resource/actions/</span><span class="symbol">:action</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/tasks/</span>&#123;taskId&#125;<span class="regexp">/actions/</span>stop</span><br></pre></td></tr></table></figure>
<h4 id="u7EDF_u4E00_u547D_u540D_2C_u91C7_u7528camelCase_u6216_u8005_u4E0B_u5212_u7EBF_u65B9_u5F0F"><a href="#u7EDF_u4E00_u547D_u540D_2C_u91C7_u7528camelCase_u6216_u8005_u4E0B_u5212_u7EBF_u65B9_u5F0F" class="headerlink" title="统一命名,采用camelCase或者下划线方式"></a>统一命名,采用camelCase或者下划线方式</h4><p>不管选择哪一种，只要一旦选择了就应该始终保持同一个风格。</p>
<h4 id="u6700_u5C0F_u5316_u8DEF_u5F84_u5D4C_u5957"><a href="#u6700_u5C0F_u5316_u8DEF_u5F84_u5D4C_u5957" class="headerlink" title="最小化路径嵌套"></a>最小化路径嵌套</h4><p>在一些有父路径/子路径嵌套关系的资源数据模块中，路径可能有非常深的嵌套关系，例如:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/orgs/</span>&#123;orgId&#125;<span class="regexp">/apps/</span>&#123;appId&#125;<span class="regexp">/dynos/</span>&#123;dynoId&#125;</span><br></pre></td></tr></table></figure>
<p>推荐在根(root)路径下指定资源来限制路径的嵌套深度。使用嵌套指定范围的资源。在上述例子中，dyno属于app，app属于org可以表示为：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/orgs/</span>&#123;orgId&#125;</span><br><span class="line"><span class="regexp">/orgs/</span>&#123;orgId&#125;/apps</span><br><span class="line"><span class="regexp">/apps/</span>&#123;appId&#125;</span><br><span class="line"><span class="regexp">/apps/</span>&#123;appId&#125;/dynos</span><br><span class="line"><span class="regexp">/dynos/</span>&#123;dynoId&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u54CD_u5E94_uFF08Responses_uFF09"><a href="#u54CD_u5E94_uFF08Responses_uFF09" class="headerlink" title="响应（Responses）"></a>响应（Responses）</h3><h4 id="u8FD4_u56DE_u5408_u9002_u7684_u72B6_u6001_u7801"><a href="#u8FD4_u56DE_u5408_u9002_u7684_u72B6_u6001_u7801" class="headerlink" title="返回合适的状态码"></a>返回合适的状态码</h4><p>为每一次的响应返回合适的HTTP状态码。 好的响应应该使用如下的状态码:</p>
<ul>
<li><code>200</code>: <code>GET</code>请求成功，及<code>DELETE</code>或<code>PATCH</code>同步请求完成，或者<code>PUT</code>同步更新一个已存在的资源</li>
<li><code>201</code>: <code>POST</code> 同步请求完成，或者<code>PUT</code>同步创建一个新的资源</li>
<li><code>202</code>: <code>POST</code>，<code>PUT</code>，<code>DELETE</code>，或<code>PATCH</code>请求接收，将被异步处理</li>
</ul>
<p>使用身份认证（authentication）和授权（authorization）错误码时需要注意：</p>
<ul>
<li><code>401 Unauthorized</code>: 用户未认证，请求失败</li>
<li><code>403 Forbidden</code>: 用户无权限访问该资源，请求失败</li>
</ul>
<p>当用户请求错误时，提供合适的状态码可以提供额外的信息：</p>
<ul>
<li><code>422 Unprocessable Entity</code>: 请求被服务器正确解析，但是包含无效字段</li>
<li><code>429 Too Many Requests</code>: 因为访问频繁，你已经被限制访问，稍后重试</li>
<li><code>500 Internal Server Error</code>: 服务器错误，确认状态并报告问题</li>
</ul>
<h4 id="u63D0_u4F9B_u5168_u90E8_u53EF_u7528_u7684_u8D44_u6E90"><a href="#u63D0_u4F9B_u5168_u90E8_u53EF_u7528_u7684_u8D44_u6E90" class="headerlink" title="提供全部可用的资源"></a>提供全部可用的资源</h4><p>提供全部可显现的资源表述 (例如： 这个对象的所有属性) ，当响应码为200或是201时返回所有可用资源，包含 <code>PUT</code>/<code>PATCH</code> 和 <code>DELETE</code><br>请求，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X DELETE \  </span><br><span class="line">  https://service.com/apps/1f9b/domains/0fd4</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json;charset=utf-8</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">  "created_at": "2012-01-01T12:00:00Z",</span><br><span class="line">  "hostname": "subdomain.example.com",</span><br><span class="line">  "id": "01234567-89ab-cdef-0123-456789abcdef",</span><br><span class="line">  "updated_at": "2012-01-01T12:00:00Z"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当请求状态码为202时，不返回所有可用资源，例如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X DELETE \  </span><br><span class="line">  https:<span class="comment">//service.com/apps/1f9b/dynos/05bd</span></span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">202</span> Accepted</span><br><span class="line">Content-Type: application/json;charset=utf-<span class="number">8</span></span><br><span class="line">...</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u63D0_u4F9B_u8D44_u6E90_u7684_28UU_29ID"><a href="#u63D0_u4F9B_u8D44_u6E90_u7684_28UU_29ID" class="headerlink" title="提供资源的(UU)ID"></a>提供资源的(UU)ID</h4><p>在默认情况给每一个资源一个<code>id</code>属性。除非有更好的理由，否则请使用UUID。不要使用那种在服务器上或是资源中不是全局唯一的标识，尤其是自动增长的id。</p>
<p>生成小写的UUID格式 <code>8-4-4-4-12</code>，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"id": "01234567-89ab-cdef-0123-456789abcdef"</span><br></pre></td></tr></table></figure>
<h4 id="u63D0_u4F9B_u6807_u51C6_u7684_u65F6_u95F4_u6233"><a href="#u63D0_u4F9B_u6807_u51C6_u7684_u65F6_u95F4_u6233" class="headerlink" title="提供标准的时间戳"></a>提供标准的时间戳</h4><p>为资源提供默认的创建时间 <code>createdAt</code> 和更新时间 <code>updatedAt</code>，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "createdAt": 1464687808,</span><br><span class="line">  "updatedAt": 1464687808,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有些资源不需要使用时间戳那么就忽略这两个字段。</p>
<h4 id="u5D4C_u5957_u5916_u952E_u5173_u7CFB"><a href="#u5D4C_u5957_u5916_u952E_u5173_u7CFB" class="headerlink" title="嵌套外键关系"></a>嵌套外键关系</h4><p>使用嵌套对象序列化外键关联，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "service-production",</span><br><span class="line">  "owner": &#123;</span><br><span class="line">    "id": "5d8201b0..."</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而不是像这样:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "service-production",</span><br><span class="line">  "ownerId": "5d8201b0...",</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式尽可能的把相关联的资源信息内联在一起，而不用改变资源的结构，或者引入更多的顶层字段，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "service-production",</span><br><span class="line">  "owner": &#123;</span><br><span class="line">    "id": "5d8201b0...",</span><br><span class="line">    "name": "Alice",</span><br><span class="line">    "email": "alice@heroku.com"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u751F_u6210_u7ED3_u6784_u5316_u7684_u9519_u8BEF"><a href="#u751F_u6210_u7ED3_u6784_u5316_u7684_u9519_u8BEF" class="headerlink" title="生成结构化的错误"></a>生成结构化的错误</h4><p>响应错误的时，生成统一的、结构化的错误信息。包含一个机器可读的错误 <code>id</code>，一个人类可读的错误信息（<code>message</code>），根据情况可以添加一个<code>url</code>来告诉客户端关于这个错误的更多信息以及如何去解决它，例如:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">429</span> Too Many Requests</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">id</span>":      <span class="value"><span class="string">"rate_limit"</span></span>,</span><br><span class="line">  "<span class="attribute">message</span>": <span class="value"><span class="string">"Account reached its API rate limit."</span></span>,</span><br><span class="line">  "<span class="attribute">url</span>":     <span class="value"><span class="string">"https://docs.service.com/rate-limits"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>文档化错误信息格式，以及客户端可能遇到的错误信息<code>id</code>。</p>
<h4 id="u663E_u793A_u9891_u7387_u9650_u5236_u72B6_u6001"><a href="#u663E_u793A_u9891_u7387_u9650_u5236_u72B6_u6001" class="headerlink" title="显示频率限制状态"></a>显示频率限制状态</h4><p>客户端的访问速度限制可以维护服务器的良好状态，保证为其他客户端请求提供高性的服务。你可以使用<a href="http://en.wikipedia.org/wiki/Token_bucket" target="_blank" rel="external">token bucket algorithm</a>技术量化请求限制。</p>
<p>为每一个带有<code>RateLimit-Remaining</code>响应头的请求，返回预留的请求tokens。</p>
<h4 id="u4FDD_u8BC1_u54CD_u5E94JSON_u6700_u5C0F_u5316"><a href="#u4FDD_u8BC1_u54CD_u5E94JSON_u6700_u5C0F_u5316" class="headerlink" title="保证响应JSON最小化"></a>保证响应JSON最小化</h4><p>请求中多余的空格会增加响应大小，而且现在很多的HTTP客户端都会自己输出可读格式（”prettify”）的JSON。所以最好保证响应JSON最小化，例如：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">beta</span>":<span class="value"><span class="literal">false</span></span>,"<span class="attribute">email</span>":<span class="value"><span class="string">"alice@heroku.com"</span></span>,"<span class="attribute">id</span>":<span class="value"><span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span></span>,"<span class="attribute">lastLogin</span>":<span class="value"><span class="string">"2012-01-01T12:00:00Z"</span></span>,"<span class="attribute">createdAt</span>":<span class="value"><span class="string">"2012-01-01T12:00:00Z"</span></span>,"<span class="attribute">updatedAt</span>":<span class="value"><span class="string">"2012-01-01T12:00:00Z"</span></span>&#125;</span><br></pre></td></tr></table></figure>
<p>而不是这样：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">beta</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">  "<span class="attribute">email</span>": <span class="value"><span class="string">"alice@heroku.com"</span></span>,</span><br><span class="line">  "<span class="attribute">id</span>": <span class="value"><span class="string">"01234567-89ab-cdef-0123-456789abcdef"</span></span>,</span><br><span class="line">  "<span class="attribute">lastLogin</span>": <span class="value"><span class="string">"2012-01-01T12:00:00Z"</span></span>,</span><br><span class="line">  "<span class="attribute">createdAt</span>": <span class="value"><span class="string">"2012-01-01T12:00:00Z"</span></span>,</span><br><span class="line">  "<span class="attribute">updatedAt</span>": <span class="value"><span class="string">"2012-01-01T12:00:00Z"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>你可以提供可选的方式为客户端提供更详细可读的响应，使用查询参数（例如：<code>?pretty=true</code>）或者通过<code>Accept</code>头信息参数（例如：<code>Accept: application/vnd.heroku+json; version=3; indent=4;</code>）。</p>
<p>###工件（Artifacts）</p>
<h4 id="u63D0_u4F9B_u673A_u5668_u53EF_u8BFB_u7684JSON_u6A21_u5F0F"><a href="#u63D0_u4F9B_u673A_u5668_u53EF_u8BFB_u7684JSON_u6A21_u5F0F" class="headerlink" title="提供机器可读的JSON模式"></a>提供机器可读的JSON模式</h4><p>提供一个机器可读的模式来恰当的表现你的API。使用<br><a href="https://github.com/interagent/prmd" target="_blank" rel="external">prmd</a>管理你的模式，并且确保用<code>prmd verify</code>验证是有效的。</p>
<h4 id="u63D0_u4F9B_u4EBA_u7C7B_u53EF_u8BFB_u7684_u6587_u6863"><a href="#u63D0_u4F9B_u4EBA_u7C7B_u53EF_u8BFB_u7684_u6587_u6863" class="headerlink" title="提供人类可读的文档"></a>提供人类可读的文档</h4><p>提供人类可读的文档让客户端开发人员可以理解你的API。</p>
<p>如果你用prmd创建了一个概要并且按上述要求描述，你可以为所有节点很容易的使用<code>prmd doc</code>生成Markdown文档。</p>
<p>除了节点信息，提供一个API概述信息:</p>
<ul>
<li>验证授权，包含如何取得和如何使用token。</li>
<li>API稳定及版本管理，包含如何选择所需要的版本。</li>
<li>一般情况下的请求和响应的头信息。</li>
<li>错误的序列化格式。</li>
<li>不同编程语言客户端使用API的例子。</li>
</ul>
<h4 id="u63D0_u4F9B_u53EF_u6267_u884C_u7684_u4F8B_u5B50"><a href="#u63D0_u4F9B_u53EF_u6267_u884C_u7684_u4F8B_u5B50" class="headerlink" title="提供可执行的例子"></a>提供可执行的例子</h4><p>提供可执行的示例让用户可以直接在终端里面看到API的调用情况，最大程度的让这些示例可以简单的使用，以减少用户尝试使用API的工作量。例如:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>export <span class="constant">TOKEN</span>=... <span class="comment"># acquire from dashboard</span></span><br><span class="line"><span class="variable">$ </span>curl -is <span class="symbol">https:</span>/<span class="regexp">/$TOKEN@service.com/users</span></span><br></pre></td></tr></table></figure>
<p>如果你使用<a href="https://github.com/interagent/prmd" target="_blank" rel="external">prmd</a>生成Markdown文档，每个节点都会自动获取一些示例。</p>
<h4 id="u63CF_u8FF0_u7A33_u5B9A_u6027"><a href="#u63CF_u8FF0_u7A33_u5B9A_u6027" class="headerlink" title="描述稳定性"></a>描述稳定性</h4><p>描述您的API的稳定性或是它在各种各样节点环境中的完备性和稳定性，例如：加上 原型版（prototype）/开发版（development）/产品版（production）等标记。</p>
<p>更多关于可能的稳定性和改变管理的方式，查看 <a href="https://devcenter.heroku.com/articles/api-compatibility-policy" target="_blank" rel="external">Heroku API compatibility policy</a></p>
<p>一旦你的API宣布产品正式版本及稳定版本时，不要在当前API版本中做一些不兼容的改变。如果你需要，请创建一个新的版本的API。</p>
<h1 id="u5B8C_u6574_u7684URL"><a href="#u5B8C_u6574_u7684URL" class="headerlink" title="完整的URL"></a>完整的URL</h1><p>API里面的数据也会有URL类型的，一般来说如用户的头像、各种图片、音频等资源，都是以URL链接的形式返回的。</p>
<p>返回的URL一定要“完整”，主要指的是不要忘记URL里面的协议部分，也就是<code>scheme</code>部分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Why_REST_3F&quot;&gt;&lt;a href=&quot;#Why_REST_3F&quot; class=&quot;headerlink&quot; title=&quot;Why REST?&quot;&gt;&lt;/a&gt;Why REST?&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Generality&lt;/li&gt;
&lt;li&gt;Independence&lt;/li&gt;
&lt;li&gt;Latency (Caching)&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Why_JSON_3F&quot;&gt;&lt;a href=&quot;#Why_JSON_3F&quot; class=&quot;headerlink&quot; title=&quot;Why JSON?&quot;&gt;&lt;/a&gt;Why JSON?&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Ubiquity&lt;/li&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Readability&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="REST" scheme="http://yoursite.com/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>RESTAPI-Reference</title>
    <link href="http://yoursite.com/2016/02/03/RESTAPI-Reference/"/>
    <id>http://yoursite.com/2016/02/03/RESTAPI-Reference/</id>
    <published>2016-02-03T04:00:41.000Z</published>
    <updated>2016-02-03T04:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究RESTAPI相关的一些最佳实践,搜集到一些不错的参考资料,备份一下。</p>
<ol>
<li>Wiki: Representational state transfer <a href="https://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services" target="_blank" rel="external">https://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services</a></li>
<li>来自HeroKu的HTTP API 设计指南(中文版) <a href="http://www.kancloud.cn/thinkphp/http-api-design/31119" target="_blank" rel="external">http://www.kancloud.cn/thinkphp/http-api-design/31119</a></li>
<li>理解RESTFul架构 <a href="http://mccxj.github.io/blog/20130530_introduce-to-rest.html" target="_blank" rel="external">http://mccxj.github.io/blog/20130530_introduce-to-rest.html</a></li>
<li>Github API Reference <a href="https://developer.github.com/v3/" target="_blank" rel="external">https://developer.github.com/v3/</a></li>
<li>Restful Web API 系列篇 <a href="http://www.cnblogs.com/artech/p/restful-web-api-02.html" target="_blank" rel="external">http://www.cnblogs.com/artech/p/restful-web-api-02.html</a></li>
<li>理解本真的REST架构风格-来自InfoQ <a href="http://www.infoq.com/cn/articles/understanding-restful-style/" target="_blank" rel="external">http://www.infoq.com/cn/articles/understanding-restful-style/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究RESTAPI相关的一些最佳实践,搜集到一些不错的参考资料,备份一下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wiki: Representational state transfer &lt;a href=&quot;https://en.wikipedia.org/wiki/Repres
    
    </summary>
    
    
      <category term="REST" scheme="http://yoursite.com/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>Git查看、删除、重命名远程分支和tag</title>
    <link href="http://yoursite.com/2016/02/02/Git%E6%9F%A5%E7%9C%8B%E3%80%81%E5%88%A0%E9%99%A4%E3%80%81%E9%87%8D%E5%91%BD%E5%90%8D%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8Ctag/"/>
    <id>http://yoursite.com/2016/02/02/Git查看、删除、重命名远程分支和tag/</id>
    <published>2016-02-02T03:49:33.000Z</published>
    <updated>2016-11-24T09:51:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><ol>
<li>查看远程分支</li>
<li>删除远程分支和tag</li>
<li>删除不存在对应远程分支的本地分支</li>
<li>重命名远程分支</li>
<li>把本地tag推送到远程</li>
<li>获取远程tag</li>
</ol>
<a id="more"></a>
<h2 id="u67E5_u770B_u8FDC_u7A0B_u5206_u652F"><a href="#u67E5_u770B_u8FDC_u7A0B_u5206_u652F" class="headerlink" title="查看远程分支"></a>查看远程分支</h2><p>加上-a参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="operator">-a</span></span><br><span class="line">  master</span><br><span class="line">  remote</span><br><span class="line">  tungway</span><br><span class="line">  v1.<span class="number">52</span></span><br><span class="line">* zrong</span><br><span class="line">  remotes/origin/master</span><br><span class="line">  remotes/origin/tungway</span><br><span class="line">  remotes/origin/v1.<span class="number">52</span></span><br><span class="line">  remotes/origin/zrong</span><br></pre></td></tr></table></figure>
<h2 id="u5220_u9664_u8FDC_u7A0B_u5206_u652F_u548Ctag"><a href="#u5220_u9664_u8FDC_u7A0B_u5206_u652F_u548Ctag" class="headerlink" title="删除远程分支和tag"></a>删除远程分支和tag</h2><p>在Git v1.7.0 之后，可以使用这种语法删除远程分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete &lt;branchName&gt;</span><br></pre></td></tr></table></figure>
<p>删除tag这么用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<!--more-->
<p>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;branchName&gt;</span><br></pre></td></tr></table></figure>
<p>这是删除tag的方法，推送一个空tag到远程tag：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="operator">-d</span> &lt;tagname&gt;</span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<p>两种语法作用完全相同。</p>
<h2 id="u5220_u9664_u4E0D_u5B58_u5728_u5BF9_u5E94_u8FDC_u7A0B_u5206_u652F_u7684_u672C_u5730_u5206_u652F"><a href="#u5220_u9664_u4E0D_u5B58_u5728_u5BF9_u5E94_u8FDC_u7A0B_u5206_u652F_u7684_u672C_u5730_u5206_u652F" class="headerlink" title="删除不存在对应远程分支的本地分支"></a>删除不存在对应远程分支的本地分支</h2><p>假设这样一种情况：</p>
<ol>
<li>我创建了本地分支b1并pull到远程分支 <code>origin/b1</code>；</li>
<li>其他人在本地使用fetch或pull创建了本地的b1分支；</li>
<li>我删除了 <code>origin/b1</code> 远程分支；</li>
<li>其他人再次执行fetch或者pull并不会删除这个他们本地的 <code>b1</code> 分支，运行 <code>git branch -a</code> 也不能看出这个branch被删除了，如何处理？</li>
</ol>
<p>使用下面的代码查看b1的状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: git@github.com:xxx/xxx.git</span><br><span class="line">  Push  URL: git@github.com:xxx/xxx.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    master                 tracked</span><br><span class="line">    refs/remotes/origin/b1 stale (use <span class="string">'git remote prune'</span> to remove)</span><br><span class="line">  Local branch configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</span><br><span class="line">    master merges with remote master</span><br><span class="line">  Local ref configured <span class="keyword">for</span> <span class="string">'git push'</span>:</span><br><span class="line">    master pushes to master (up to date)</span><br></pre></td></tr></table></figure>
<p>这时候能够看到b1是stale的，使用 <code>git remote prune origin</code> 可以将其从本地版本库中去除。</p>
<p>更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>
<h2 id="u91CD_u547D_u540D_u8FDC_u7A0B_u5206_u652F"><a href="#u91CD_u547D_u540D_u8FDC_u7A0B_u5206_u652F" class="headerlink" title="重命名远程分支"></a>重命名远程分支</h2><p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p>
<p>例如下面的例子中，我需要把 devel 分支重命名为 develop 分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -av</span><br><span class="line">* devel                             <span class="number">752</span>bb84 Merge pull request <span class="comment">#158 from Gwill/devel</span></span><br><span class="line">  master                            <span class="number">53</span>b27b8 Merge pull request <span class="comment">#138 from tdlrobin/master</span></span><br><span class="line">  zrong                             <span class="number">2</span>ae98d8 modify CCFileUtils, <span class="built_in">export</span> getFileData</span><br><span class="line">  remotes/origin/HEAD               -&gt; origin/master</span><br><span class="line">  remotes/origin/add_build_script   d4a8c4f Merge branch <span class="string">'master'</span> into add_build_script</span><br><span class="line">  remotes/origin/devel              <span class="number">752</span>bb84 Merge pull request <span class="comment">#158 from Gwill/devel</span></span><br><span class="line">  remotes/origin/devel_qt51         <span class="number">62208</span>f1 update .gitignore</span><br><span class="line">  remotes/origin/master             <span class="number">53</span>b27b8 Merge pull request <span class="comment">#138 from tdlrobin/master</span></span><br><span class="line">  remotes/origin/zrong              <span class="number">2</span>ae98d8 modify CCFileUtils, <span class="built_in">export</span> getFileData</span><br></pre></td></tr></table></figure>
<p>删除远程分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete origin devel</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line"> - [deleted]         devel</span><br></pre></td></tr></table></figure>
<p>重命名本地分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m devel develop</span><br></pre></td></tr></table></figure>
<p>推送本地分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin develop</span><br><span class="line">Counting objects: <span class="number">92</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">4</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">48</span>/<span class="number">48</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">58</span>/<span class="number">58</span>), <span class="number">1.38</span> MiB, done.</span><br><span class="line">Total <span class="number">58</span> (delta <span class="number">34</span>), reused <span class="number">12</span> (delta <span class="number">5</span>)</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line"> * [new branch]      develop -&gt; develop</span><br></pre></td></tr></table></figure>
<p>然而，在 github 上操作的时候，我在删除远程分支时碰到这个错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete origin devel</span><br><span class="line">remote: error: refusing to delete the current branch: refs/heads/devel</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line"> ! [remote rejected] devel (deletion of the current branch prohibited)</span><br><span class="line">error: failed to push some refs to <span class="string">'git@github.com:zrong/quick-cocos2d-x.git'</span></span><br></pre></td></tr></table></figure>
<p>这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：</p>
<ol>
<li>进入 github 中该项目的 Settings 页面；</li>
<li>设置 Default Branch 为其他的分支（例如 master）；</li>
<li>重新执行删除远程分支命令。</li>
</ol>
<h2 id="u628A_u672C_u5730tag_u63A8_u9001_u5230_u8FDC_u7A0B"><a href="#u628A_u672C_u5730tag_u63A8_u9001_u5230_u8FDC_u7A0B" class="headerlink" title="把本地tag推送到远程"></a>把本地tag推送到远程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>
<h2 id="u83B7_u53D6_u8FDC_u7A0Btag"><a href="#u83B7_u53D6_u8FDC_u7A0Btag" class="headerlink" title="获取远程tag"></a>获取远程tag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<h2 id="u53C2_u8003_u6587_u7AE0"><a href="#u53C2_u8003_u6587_u7AE0" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote" target="_blank" rel="external">https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote</a></li>
<li><a href="http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github" target="_blank" rel="external">http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github</a></li>
<li><a href="http://www.cnblogs.com/deepnighttwo/archive/2011/06/18/2084438.html" target="_blank" rel="external">http://www.cnblogs.com/deepnighttwo/archive/2011/06/18/2084438.html</a></li>
<li><a href="http://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-current-branch" target="_blank" rel="external">http://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-current-branch</a></li>
<li><a href="http://weli.iteye.com/blog/1441582" target="_blank" rel="external">http://weli.iteye.com/blog/1441582</a></li>
<li><a href="http://zengrong.net/post/1746.htm" target="_blank" rel="external">http://zengrong.net/post/1746.htm</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;查看远程分支&lt;/li&gt;
&lt;li&gt;删除远程分支和tag&lt;/li&gt;
&lt;li&gt;删除不存在对应远程分支的本地分支&lt;/li&gt;
&lt;li&gt;重命名远程分支&lt;/li&gt;
&lt;li&gt;把本地tag推送到远程&lt;/li&gt;
&lt;li&gt;获取远程tag&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
